#![allow(nonstandard_style)]
#![allow(unused)]
/* automatically generated by rust-bindgen 0.54.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const SUNDIALS_VERSION: &'static [u8; 6usize] = b"5.3.0\0";
pub const SUNDIALS_VERSION_MAJOR: u32 = 5;
pub const SUNDIALS_VERSION_MINOR: u32 = 3;
pub const SUNDIALS_VERSION_PATCH: u32 = 0;
pub const SUNDIALS_VERSION_LABEL: &'static [u8; 1usize] = b"\0";
pub const SUNDIALS_SINGLE_PRECISION: u32 = 1;
pub const SUNDIALS_INT32_T: u32 = 1;
pub const SUNDIALS_MPI_COMM_F2C: u32 = 0;
pub const FLT_EVAL_METHOD: u32 = 0;
pub const DBL_DECIMAL_DIG: u32 = 17;
pub const DBL_DIG: u32 = 15;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const DBL_MANT_DIG: u32 = 53;
pub const DBL_MAX_10_EXP: u32 = 308;
pub const DBL_MAX_EXP: u32 = 1024;
pub const DBL_MIN_10_EXP: i32 = -307;
pub const DBL_MIN_EXP: i32 = -1021;
pub const _DBL_RADIX: u32 = 2;
pub const FLT_DECIMAL_DIG: u32 = 9;
pub const FLT_DIG: u32 = 6;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const FLT_GUARD: u32 = 0;
pub const FLT_MANT_DIG: u32 = 24;
pub const FLT_MAX_10_EXP: u32 = 38;
pub const FLT_MAX_EXP: u32 = 128;
pub const FLT_MIN_10_EXP: i32 = -37;
pub const FLT_MIN_EXP: i32 = -125;
pub const FLT_NORMALIZE: u32 = 0;
pub const FLT_RADIX: u32 = 2;
pub const LDBL_DIG: u32 = 15;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_MANT_DIG: u32 = 53;
pub const LDBL_MAX_10_EXP: u32 = 308;
pub const LDBL_MAX_EXP: u32 = 1024;
pub const LDBL_MIN_10_EXP: i32 = -307;
pub const LDBL_MIN_EXP: i32 = -1021;
pub const _LDBL_RADIX: u32 = 2;
pub const DECIMAL_DIG: u32 = 17;
pub const _SW_INEXACT: u32 = 1;
pub const _SW_UNDERFLOW: u32 = 2;
pub const _SW_OVERFLOW: u32 = 4;
pub const _SW_ZERODIVIDE: u32 = 8;
pub const _SW_INVALID: u32 = 16;
pub const _SW_DENORMAL: u32 = 524288;
pub const _EM_AMBIGUIOUS: u32 = 2147483648;
pub const _EM_AMBIGUOUS: u32 = 2147483648;
pub const _MCW_EM: u32 = 524319;
pub const _EM_INEXACT: u32 = 1;
pub const _EM_UNDERFLOW: u32 = 2;
pub const _EM_OVERFLOW: u32 = 4;
pub const _EM_ZERODIVIDE: u32 = 8;
pub const _EM_INVALID: u32 = 16;
pub const _EM_DENORMAL: u32 = 524288;
pub const _MCW_RC: u32 = 768;
pub const _RC_NEAR: u32 = 0;
pub const _RC_DOWN: u32 = 256;
pub const _RC_UP: u32 = 512;
pub const _RC_CHOP: u32 = 768;
pub const _MCW_PC: u32 = 196608;
pub const _PC_64: u32 = 0;
pub const _PC_53: u32 = 65536;
pub const _PC_24: u32 = 131072;
pub const _MCW_IC: u32 = 262144;
pub const _IC_AFFINE: u32 = 262144;
pub const _IC_PROJECTIVE: u32 = 0;
pub const _MCW_DN: u32 = 50331648;
pub const _DN_SAVE: u32 = 0;
pub const _DN_FLUSH: u32 = 16777216;
pub const _DN_FLUSH_OPERANDS_SAVE_RESULTS: u32 = 33554432;
pub const _DN_SAVE_OPERANDS_FLUSH_RESULTS: u32 = 50331648;
pub const _SW_UNEMULATED: u32 = 64;
pub const _SW_SQRTNEG: u32 = 128;
pub const _SW_STACKOVERFLOW: u32 = 512;
pub const _SW_STACKUNDERFLOW: u32 = 1024;
pub const _FPE_INVALID: u32 = 129;
pub const _FPE_DENORMAL: u32 = 130;
pub const _FPE_ZERODIVIDE: u32 = 131;
pub const _FPE_OVERFLOW: u32 = 132;
pub const _FPE_UNDERFLOW: u32 = 133;
pub const _FPE_INEXACT: u32 = 134;
pub const _FPE_UNEMULATED: u32 = 135;
pub const _FPE_SQRTNEG: u32 = 136;
pub const _FPE_STACKOVERFLOW: u32 = 138;
pub const _FPE_STACKUNDERFLOW: u32 = 139;
pub const _FPE_EXPLICITGEN: u32 = 140;
pub const _FPE_MULTIPLE_TRAPS: u32 = 141;
pub const _FPE_MULTIPLE_FAULTS: u32 = 142;
pub const _FPCLASS_SNAN: u32 = 1;
pub const _FPCLASS_QNAN: u32 = 2;
pub const _FPCLASS_NINF: u32 = 4;
pub const _FPCLASS_NN: u32 = 8;
pub const _FPCLASS_ND: u32 = 16;
pub const _FPCLASS_NZ: u32 = 32;
pub const _FPCLASS_PZ: u32 = 64;
pub const _FPCLASS_PD: u32 = 128;
pub const _FPCLASS_PN: u32 = 256;
pub const _FPCLASS_PINF: u32 = 512;
pub const _CW_DEFAULT: u32 = 524319;
pub const DBL_RADIX: u32 = 2;
pub const LDBL_RADIX: u32 = 2;
pub const EM_AMBIGUIOUS: u32 = 2147483648;
pub const EM_AMBIGUOUS: u32 = 2147483648;
pub const MCW_EM: u32 = 524319;
pub const EM_INVALID: u32 = 16;
pub const EM_DENORMAL: u32 = 524288;
pub const EM_ZERODIVIDE: u32 = 8;
pub const EM_OVERFLOW: u32 = 4;
pub const EM_UNDERFLOW: u32 = 2;
pub const EM_INEXACT: u32 = 1;
pub const MCW_IC: u32 = 262144;
pub const IC_AFFINE: u32 = 262144;
pub const IC_PROJECTIVE: u32 = 0;
pub const MCW_RC: u32 = 768;
pub const RC_CHOP: u32 = 768;
pub const RC_UP: u32 = 512;
pub const RC_DOWN: u32 = 256;
pub const RC_NEAR: u32 = 0;
pub const MCW_PC: u32 = 196608;
pub const PC_24: u32 = 131072;
pub const PC_53: u32 = 65536;
pub const PC_64: u32 = 0;
pub const CW_DEFAULT: u32 = 524319;
pub const SW_INVALID: u32 = 16;
pub const SW_DENORMAL: u32 = 524288;
pub const SW_ZERODIVIDE: u32 = 8;
pub const SW_OVERFLOW: u32 = 4;
pub const SW_UNDERFLOW: u32 = 2;
pub const SW_INEXACT: u32 = 1;
pub const SW_UNEMULATED: u32 = 64;
pub const SW_SQRTNEG: u32 = 128;
pub const SW_STACKOVERFLOW: u32 = 512;
pub const SW_STACKUNDERFLOW: u32 = 1024;
pub const FPE_INVALID: u32 = 129;
pub const FPE_DENORMAL: u32 = 130;
pub const FPE_ZERODIVIDE: u32 = 131;
pub const FPE_OVERFLOW: u32 = 132;
pub const FPE_UNDERFLOW: u32 = 133;
pub const FPE_INEXACT: u32 = 134;
pub const FPE_UNEMULATED: u32 = 135;
pub const FPE_SQRTNEG: u32 = 136;
pub const FPE_STACKOVERFLOW: u32 = 138;
pub const FPE_STACKUNDERFLOW: u32 = 139;
pub const FPE_EXPLICITGEN: u32 = 140;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const SUNFALSE: u32 = 0;
pub const SUNTRUE: u32 = 1;
pub const SUNMAT_SUCCESS: u32 = 0;
pub const SUNMAT_ILL_INPUT: i32 = -701;
pub const SUNMAT_MEM_FAIL: i32 = -702;
pub const SUNMAT_OPERATION_FAIL: i32 = -703;
pub const SUNMAT_MATVEC_SETUP_REQUIRED: i32 = -704;
pub const SUNLS_SUCCESS: u32 = 0;
pub const SUNLS_MEM_NULL: i32 = -801;
pub const SUNLS_ILL_INPUT: i32 = -802;
pub const SUNLS_MEM_FAIL: i32 = -803;
pub const SUNLS_ATIMES_NULL: i32 = -804;
pub const SUNLS_ATIMES_FAIL_UNREC: i32 = -805;
pub const SUNLS_PSET_FAIL_UNREC: i32 = -806;
pub const SUNLS_PSOLVE_NULL: i32 = -807;
pub const SUNLS_PSOLVE_FAIL_UNREC: i32 = -808;
pub const SUNLS_PACKAGE_FAIL_UNREC: i32 = -809;
pub const SUNLS_GS_FAIL: i32 = -810;
pub const SUNLS_QRSOL_FAIL: i32 = -811;
pub const SUNLS_VECTOROP_ERR: i32 = -812;
pub const SUNLS_RES_REDUCED: u32 = 801;
pub const SUNLS_CONV_FAIL: u32 = 802;
pub const SUNLS_ATIMES_FAIL_REC: u32 = 803;
pub const SUNLS_PSET_FAIL_REC: u32 = 804;
pub const SUNLS_PSOLVE_FAIL_REC: u32 = 805;
pub const SUNLS_PACKAGE_FAIL_REC: u32 = 806;
pub const SUNLS_QRFACT_FAIL: u32 = 807;
pub const SUNLS_LUFACT_FAIL: u32 = 808;
pub const SUNLS_MSG_RESIDUAL: &'static [u8; 41usize] =
    b"\t\tlin. iteration %ld, lin. residual: %g\n\0";
pub const SUNDIALS_DENSE: u32 = 1;
pub const SUNDIALS_BAND: u32 = 2;
pub const SUNSPBCGS_MAXL_DEFAULT: u32 = 5;
pub const SUNSPGMR_MAXL_DEFAULT: u32 = 5;
pub const SUNSPGMR_MAXRS_DEFAULT: u32 = 0;
pub const SUNPCG_MAXL_DEFAULT: u32 = 5;
pub const SUNSPFGMR_MAXL_DEFAULT: u32 = 5;
pub const SUNSPFGMR_MAXRS_DEFAULT: u32 = 0;
pub const SUNSPTFQMR_MAXL_DEFAULT: u32 = 5;
pub const CSC_MAT: u32 = 0;
pub const CSR_MAT: u32 = 1;
pub const SUN_NLS_SUCCESS: u32 = 0;
pub const SUN_NLS_CONTINUE: u32 = 901;
pub const SUN_NLS_CONV_RECVR: u32 = 902;
pub const SUN_NLS_MEM_NULL: i32 = -901;
pub const SUN_NLS_MEM_FAIL: i32 = -902;
pub const SUN_NLS_ILL_INPUT: i32 = -903;
pub const SUN_NLS_VECTOROP_ERR: i32 = -904;
pub const SUN_NLS_EXT_FAIL: i32 = -905;
pub const SUN_NLS_MSG_RESIDUAL: &'static [u8; 46usize] =
    b"\tnonlin. iteration %ld, nonlin. residual: %g\n\0";
pub const CVLS_SUCCESS: u32 = 0;
pub const CVLS_MEM_NULL: i32 = -1;
pub const CVLS_LMEM_NULL: i32 = -2;
pub const CVLS_ILL_INPUT: i32 = -3;
pub const CVLS_MEM_FAIL: i32 = -4;
pub const CVLS_PMEM_NULL: i32 = -5;
pub const CVLS_JACFUNC_UNRECVR: i32 = -6;
pub const CVLS_JACFUNC_RECVR: i32 = -7;
pub const CVLS_SUNMAT_FAIL: i32 = -8;
pub const CVLS_SUNLS_FAIL: i32 = -9;
pub const CV_ADAMS: u32 = 1;
pub const CV_BDF: u32 = 2;
pub const CV_NORMAL: u32 = 1;
pub const CV_ONE_STEP: u32 = 2;
pub const CV_SUCCESS: u32 = 0;
pub const CV_TSTOP_RETURN: u32 = 1;
pub const CV_ROOT_RETURN: u32 = 2;
pub const CV_WARNING: u32 = 99;
pub const CV_TOO_MUCH_WORK: i32 = -1;
pub const CV_TOO_MUCH_ACC: i32 = -2;
pub const CV_ERR_FAILURE: i32 = -3;
pub const CV_CONV_FAILURE: i32 = -4;
pub const CV_LINIT_FAIL: i32 = -5;
pub const CV_LSETUP_FAIL: i32 = -6;
pub const CV_LSOLVE_FAIL: i32 = -7;
pub const CV_RHSFUNC_FAIL: i32 = -8;
pub const CV_FIRST_RHSFUNC_ERR: i32 = -9;
pub const CV_REPTD_RHSFUNC_ERR: i32 = -10;
pub const CV_UNREC_RHSFUNC_ERR: i32 = -11;
pub const CV_RTFUNC_FAIL: i32 = -12;
pub const CV_NLS_INIT_FAIL: i32 = -13;
pub const CV_NLS_SETUP_FAIL: i32 = -14;
pub const CV_CONSTR_FAIL: i32 = -15;
pub const CV_NLS_FAIL: i32 = -16;
pub const CV_MEM_FAIL: i32 = -20;
pub const CV_MEM_NULL: i32 = -21;
pub const CV_ILL_INPUT: i32 = -22;
pub const CV_NO_MALLOC: i32 = -23;
pub const CV_BAD_K: i32 = -24;
pub const CV_BAD_T: i32 = -25;
pub const CV_BAD_DKY: i32 = -26;
pub const CV_TOO_CLOSE: i32 = -27;
pub const CV_VECTOROP_ERR: i32 = -28;
pub const CV_PROJ_MEM_NULL: i32 = -29;
pub const CV_PROJFUNC_FAIL: i32 = -30;
pub const CV_REPTD_PROJFUNC_ERR: i32 = -31;
pub const CV_UNRECOGNIZED_ERR: i32 = -99;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type max_align_t = f64;
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: size_t,
        _Dir: *mut wchar_t,
        _DirCount: size_t,
        _Filename: *mut wchar_t,
        _FilenameCount: size_t,
        _Ext: *mut wchar_t,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDOUBLE>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_DOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_FLOAT>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LONGDOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDBL12>())).ld12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn _clearfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _controlfp(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _set_controlfp(_NewValue: ::std::os::raw::c_uint, _Mask: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _controlfp_s(
        _CurrentState: *mut ::std::os::raw::c_uint,
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> errno_t;
}
extern "C" {
    pub fn _statusfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _fpreset();
}
extern "C" {
    pub fn _control87(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __fpecode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpe_flt_rounds() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
extern "C" {
    pub fn _scalb(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn _logb(_X: f64) -> f64;
}
extern "C" {
    pub fn _nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _finite(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnan(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclass(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _scalbf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn fpreset();
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type realtype = f32;
pub type sunindextype = i32;
pub const N_Vector_ID_SUNDIALS_NVEC_SERIAL: N_Vector_ID = 0;
pub const N_Vector_ID_SUNDIALS_NVEC_PARALLEL: N_Vector_ID = 1;
pub const N_Vector_ID_SUNDIALS_NVEC_OPENMP: N_Vector_ID = 2;
pub const N_Vector_ID_SUNDIALS_NVEC_PTHREADS: N_Vector_ID = 3;
pub const N_Vector_ID_SUNDIALS_NVEC_PARHYP: N_Vector_ID = 4;
pub const N_Vector_ID_SUNDIALS_NVEC_PETSC: N_Vector_ID = 5;
pub const N_Vector_ID_SUNDIALS_NVEC_CUDA: N_Vector_ID = 6;
pub const N_Vector_ID_SUNDIALS_NVEC_RAJA: N_Vector_ID = 7;
pub const N_Vector_ID_SUNDIALS_NVEC_OPENMPDEV: N_Vector_ID = 8;
pub const N_Vector_ID_SUNDIALS_NVEC_TRILINOS: N_Vector_ID = 9;
pub const N_Vector_ID_SUNDIALS_NVEC_MANYVECTOR: N_Vector_ID = 10;
pub const N_Vector_ID_SUNDIALS_NVEC_MPIMANYVECTOR: N_Vector_ID = 11;
pub const N_Vector_ID_SUNDIALS_NVEC_MPIPLUSX: N_Vector_ID = 12;
pub const N_Vector_ID_SUNDIALS_NVEC_CUSTOM: N_Vector_ID = 13;
pub type N_Vector_ID = i32;
pub type N_Vector_Ops = *mut _generic_N_Vector_Ops;
pub type N_Vector = *mut _generic_N_Vector;
pub type N_Vector_S = *mut N_Vector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _generic_N_Vector_Ops {
    pub nvgetvectorid: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> N_Vector_ID>,
    pub nvclone: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> N_Vector>,
    pub nvcloneempty: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> N_Vector>,
    pub nvdestroy: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector)>,
    pub nvspace: ::std::option::Option<
        unsafe extern "C" fn(arg1: N_Vector, arg2: *mut sunindextype, arg3: *mut sunindextype),
    >,
    pub nvgetarraypointer:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> *mut realtype>,
    pub nvsetarraypointer:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut realtype, arg2: N_Vector)>,
    pub nvgetcommunicator:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> *mut ::std::os::raw::c_void>,
    pub nvgetlength: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> sunindextype>,
    pub nvlinearsum: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: realtype,
            arg2: N_Vector,
            arg3: realtype,
            arg4: N_Vector,
            arg5: N_Vector,
        ),
    >,
    pub nvconst: ::std::option::Option<unsafe extern "C" fn(arg1: realtype, arg2: N_Vector)>,
    pub nvprod:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector, arg3: N_Vector)>,
    pub nvdiv:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector, arg3: N_Vector)>,
    pub nvscale:
        ::std::option::Option<unsafe extern "C" fn(arg1: realtype, arg2: N_Vector, arg3: N_Vector)>,
    pub nvabs: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector)>,
    pub nvinv: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector)>,
    pub nvaddconst:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: realtype, arg3: N_Vector)>,
    pub nvdotprod:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector) -> realtype>,
    pub nvmaxnorm: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> realtype>,
    pub nvwrmsnorm:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector) -> realtype>,
    pub nvwrmsnormmask: ::std::option::Option<
        unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector, arg3: N_Vector) -> realtype,
    >,
    pub nvmin: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> realtype>,
    pub nvwl2norm:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector) -> realtype>,
    pub nvl1norm: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> realtype>,
    pub nvcompare:
        ::std::option::Option<unsafe extern "C" fn(arg1: realtype, arg2: N_Vector, arg3: N_Vector)>,
    pub nvinvtest: ::std::option::Option<
        unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector) -> ::std::os::raw::c_int,
    >,
    pub nvconstrmask: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: N_Vector,
            arg2: N_Vector,
            arg3: N_Vector,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvminquotient:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector) -> realtype>,
    pub nvlinearcombination: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut realtype,
            arg3: *mut N_Vector,
            arg4: N_Vector,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvscaleaddmulti: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut realtype,
            arg3: N_Vector,
            arg4: *mut N_Vector,
            arg5: *mut N_Vector,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvdotprodmulti: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: N_Vector,
            arg3: *mut N_Vector,
            arg4: *mut realtype,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvlinearsumvectorarray: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: realtype,
            arg3: *mut N_Vector,
            arg4: realtype,
            arg5: *mut N_Vector,
            arg6: *mut N_Vector,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvscalevectorarray: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut realtype,
            arg3: *mut N_Vector,
            arg4: *mut N_Vector,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvconstvectorarray: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: realtype,
            arg3: *mut N_Vector,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvwrmsnormvectorarray: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut N_Vector,
            arg3: *mut N_Vector,
            arg4: *mut realtype,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvwrmsnormmaskvectorarray: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut N_Vector,
            arg3: *mut N_Vector,
            arg4: N_Vector,
            arg5: *mut realtype,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvscaleaddmultivectorarray: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: *mut realtype,
            arg4: *mut N_Vector,
            arg5: *mut *mut N_Vector,
            arg6: *mut *mut N_Vector,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvlinearcombinationvectorarray: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: *mut realtype,
            arg4: *mut *mut N_Vector,
            arg5: *mut N_Vector,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvdotprodlocal:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector) -> realtype>,
    pub nvmaxnormlocal: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> realtype>,
    pub nvminlocal: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> realtype>,
    pub nvl1normlocal: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector) -> realtype>,
    pub nvinvtestlocal: ::std::option::Option<
        unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector) -> ::std::os::raw::c_int,
    >,
    pub nvconstrmasklocal: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: N_Vector,
            arg2: N_Vector,
            arg3: N_Vector,
        ) -> ::std::os::raw::c_int,
    >,
    pub nvminquotientlocal:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector) -> realtype>,
    pub nvwsqrsumlocal:
        ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector) -> realtype>,
    pub nvwsqrsummasklocal: ::std::option::Option<
        unsafe extern "C" fn(arg1: N_Vector, arg2: N_Vector, arg3: N_Vector) -> realtype,
    >,
    pub nvprint: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector)>,
    pub nvprintfile: ::std::option::Option<unsafe extern "C" fn(arg1: N_Vector, arg2: *mut FILE)>,
}
#[test]
fn bindgen_test_layout__generic_N_Vector_Ops() {
    assert_eq!(
        ::std::mem::size_of::<_generic_N_Vector_Ops>(),
        392usize,
        concat!("Size of: ", stringify!(_generic_N_Vector_Ops))
    );
    assert_eq!(
        ::std::mem::align_of::<_generic_N_Vector_Ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_generic_N_Vector_Ops))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvgetvectorid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvgetvectorid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvclone as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvclone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvcloneempty as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvcloneempty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvdestroy as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvdestroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvspace as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvspace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvgetarraypointer as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvgetarraypointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvsetarraypointer as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvsetarraypointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvgetcommunicator as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvgetcommunicator)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvgetlength as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvgetlength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvlinearsum as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvlinearsum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvconst as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvconst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvprod as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvprod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvdiv as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvdiv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvscale as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvscale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvabs as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvabs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvinv as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvinv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvaddconst as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvaddconst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvdotprod as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvdotprod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvmaxnorm as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvmaxnorm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvwrmsnorm as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvwrmsnorm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvwrmsnormmask as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvwrmsnormmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvmin as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvwl2norm as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvwl2norm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvl1norm as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvl1norm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvcompare as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvcompare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvinvtest as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvinvtest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvconstrmask as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvconstrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvminquotient as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvminquotient)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvlinearcombination as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvlinearcombination)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvscaleaddmulti as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvscaleaddmulti)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvdotprodmulti as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvdotprodmulti)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvlinearsumvectorarray as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvlinearsumvectorarray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvscalevectorarray as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvscalevectorarray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvconstvectorarray as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvconstvectorarray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvwrmsnormvectorarray as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvwrmsnormvectorarray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvwrmsnormmaskvectorarray as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvwrmsnormmaskvectorarray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvscaleaddmultivectorarray as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvscaleaddmultivectorarray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvlinearcombinationvectorarray
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvlinearcombinationvectorarray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvdotprodlocal as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvdotprodlocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvmaxnormlocal as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvmaxnormlocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvminlocal as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvminlocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvl1normlocal as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvl1normlocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvinvtestlocal as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvinvtestlocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvconstrmasklocal as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvconstrmasklocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvminquotientlocal as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvminquotientlocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvwsqrsumlocal as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvwsqrsumlocal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvwsqrsummasklocal as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvwsqrsummasklocal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvprint as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_N_Vector_Ops>())).nvprintfile as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector_Ops),
            "::",
            stringify!(nvprintfile)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _generic_N_Vector {
    pub content: *mut ::std::os::raw::c_void,
    pub ops: N_Vector_Ops,
}
#[test]
fn bindgen_test_layout__generic_N_Vector() {
    assert_eq!(
        ::std::mem::size_of::<_generic_N_Vector>(),
        16usize,
        concat!("Size of: ", stringify!(_generic_N_Vector))
    );
    assert_eq!(
        ::std::mem::align_of::<_generic_N_Vector>(),
        8usize,
        concat!("Alignment of ", stringify!(_generic_N_Vector))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector>())).content as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector),
            "::",
            stringify!(content)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_N_Vector>())).ops as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_N_Vector),
            "::",
            stringify!(ops)
        )
    );
}
extern "C" {
    pub fn N_VNewEmpty() -> N_Vector;
}
extern "C" {
    pub fn N_VFreeEmpty(v: N_Vector);
}
extern "C" {
    pub fn N_VCopyOps(w: N_Vector, v: N_Vector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VGetVectorID(w: N_Vector) -> N_Vector_ID;
}
extern "C" {
    pub fn N_VClone(w: N_Vector) -> N_Vector;
}
extern "C" {
    pub fn N_VCloneEmpty(w: N_Vector) -> N_Vector;
}
extern "C" {
    pub fn N_VDestroy(v: N_Vector);
}
extern "C" {
    pub fn N_VSpace(v: N_Vector, lrw: *mut sunindextype, liw: *mut sunindextype);
}
extern "C" {
    pub fn N_VGetArrayPointer(v: N_Vector) -> *mut realtype;
}
extern "C" {
    pub fn N_VSetArrayPointer(v_data: *mut realtype, v: N_Vector);
}
extern "C" {
    pub fn N_VGetCommunicator(v: N_Vector) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn N_VGetLength(v: N_Vector) -> sunindextype;
}
extern "C" {
    pub fn N_VLinearSum(a: realtype, x: N_Vector, b: realtype, y: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VConst(c: realtype, z: N_Vector);
}
extern "C" {
    pub fn N_VProd(x: N_Vector, y: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VDiv(x: N_Vector, y: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VScale(c: realtype, x: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VAbs(x: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VInv(x: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VAddConst(x: N_Vector, b: realtype, z: N_Vector);
}
extern "C" {
    pub fn N_VDotProd(x: N_Vector, y: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VMaxNorm(x: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VWrmsNorm(x: N_Vector, w: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VWrmsNormMask(x: N_Vector, w: N_Vector, id: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VMin(x: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VWL2Norm(x: N_Vector, w: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VL1Norm(x: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VCompare(c: realtype, x: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VInvTest(x: N_Vector, z: N_Vector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VConstrMask(c: N_Vector, x: N_Vector, m: N_Vector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VMinQuotient(num: N_Vector, denom: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VLinearCombination(
        nvec: ::std::os::raw::c_int,
        c: *mut realtype,
        X: *mut N_Vector,
        z: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VScaleAddMulti(
        nvec: ::std::os::raw::c_int,
        a: *mut realtype,
        x: N_Vector,
        Y: *mut N_Vector,
        Z: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VDotProdMulti(
        nvec: ::std::os::raw::c_int,
        x: N_Vector,
        Y: *mut N_Vector,
        dotprods: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VLinearSumVectorArray(
        nvec: ::std::os::raw::c_int,
        a: realtype,
        X: *mut N_Vector,
        b: realtype,
        Y: *mut N_Vector,
        Z: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VScaleVectorArray(
        nvec: ::std::os::raw::c_int,
        c: *mut realtype,
        X: *mut N_Vector,
        Z: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VConstVectorArray(
        nvec: ::std::os::raw::c_int,
        c: realtype,
        Z: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VWrmsNormVectorArray(
        nvec: ::std::os::raw::c_int,
        X: *mut N_Vector,
        W: *mut N_Vector,
        nrm: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VWrmsNormMaskVectorArray(
        nvec: ::std::os::raw::c_int,
        X: *mut N_Vector,
        W: *mut N_Vector,
        id: N_Vector,
        nrm: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VScaleAddMultiVectorArray(
        nvec: ::std::os::raw::c_int,
        nsum: ::std::os::raw::c_int,
        a: *mut realtype,
        X: *mut N_Vector,
        Y: *mut *mut N_Vector,
        Z: *mut *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VLinearCombinationVectorArray(
        nvec: ::std::os::raw::c_int,
        nsum: ::std::os::raw::c_int,
        c: *mut realtype,
        X: *mut *mut N_Vector,
        Z: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VDotProdLocal(x: N_Vector, y: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VMaxNormLocal(x: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VMinLocal(x: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VL1NormLocal(x: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VWSqrSumLocal(x: N_Vector, w: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VWSqrSumMaskLocal(x: N_Vector, w: N_Vector, id: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VInvTestLocal(x: N_Vector, z: N_Vector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VConstrMaskLocal(c: N_Vector, x: N_Vector, m: N_Vector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VMinQuotientLocal(num: N_Vector, denom: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VNewVectorArray(count: ::std::os::raw::c_int) -> *mut N_Vector;
}
extern "C" {
    pub fn N_VCloneEmptyVectorArray(count: ::std::os::raw::c_int, w: N_Vector) -> *mut N_Vector;
}
extern "C" {
    pub fn N_VCloneVectorArray(count: ::std::os::raw::c_int, w: N_Vector) -> *mut N_Vector;
}
extern "C" {
    pub fn N_VDestroyVectorArray(vs: *mut N_Vector, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn N_VGetVecAtIndexVectorArray(vs: *mut N_Vector, index: ::std::os::raw::c_int)
        -> N_Vector;
}
extern "C" {
    pub fn N_VSetVecAtIndexVectorArray(
        vs: *mut N_Vector,
        index: ::std::os::raw::c_int,
        w: N_Vector,
    );
}
extern "C" {
    pub fn N_VPrint(v: N_Vector);
}
extern "C" {
    pub fn N_VPrintFile(v: N_Vector, outfile: *mut FILE);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _N_VectorContent_Serial {
    pub length: sunindextype,
    pub own_data: ::std::os::raw::c_int,
    pub data: *mut realtype,
}
#[test]
fn bindgen_test_layout__N_VectorContent_Serial() {
    assert_eq!(
        ::std::mem::size_of::<_N_VectorContent_Serial>(),
        16usize,
        concat!("Size of: ", stringify!(_N_VectorContent_Serial))
    );
    assert_eq!(
        ::std::mem::align_of::<_N_VectorContent_Serial>(),
        8usize,
        concat!("Alignment of ", stringify!(_N_VectorContent_Serial))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_N_VectorContent_Serial>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_N_VectorContent_Serial),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_N_VectorContent_Serial>())).own_data as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_N_VectorContent_Serial),
            "::",
            stringify!(own_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_N_VectorContent_Serial>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_N_VectorContent_Serial),
            "::",
            stringify!(data)
        )
    );
}
pub type N_VectorContent_Serial = *mut _N_VectorContent_Serial;
extern "C" {
    pub fn N_VNew_Serial(vec_length: sunindextype) -> N_Vector;
}
extern "C" {
    pub fn N_VNewEmpty_Serial(vec_length: sunindextype) -> N_Vector;
}
extern "C" {
    pub fn N_VMake_Serial(vec_length: sunindextype, v_data: *mut realtype) -> N_Vector;
}
extern "C" {
    pub fn N_VCloneVectorArray_Serial(count: ::std::os::raw::c_int, w: N_Vector) -> *mut N_Vector;
}
extern "C" {
    pub fn N_VCloneVectorArrayEmpty_Serial(
        count: ::std::os::raw::c_int,
        w: N_Vector,
    ) -> *mut N_Vector;
}
extern "C" {
    pub fn N_VDestroyVectorArray_Serial(vs: *mut N_Vector, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn N_VGetLength_Serial(v: N_Vector) -> sunindextype;
}
extern "C" {
    pub fn N_VPrint_Serial(v: N_Vector);
}
extern "C" {
    pub fn N_VPrintFile_Serial(v: N_Vector, outfile: *mut FILE);
}
extern "C" {
    pub fn N_VGetVectorID_Serial(v: N_Vector) -> N_Vector_ID;
}
extern "C" {
    pub fn N_VCloneEmpty_Serial(w: N_Vector) -> N_Vector;
}
extern "C" {
    pub fn N_VClone_Serial(w: N_Vector) -> N_Vector;
}
extern "C" {
    pub fn N_VDestroy_Serial(v: N_Vector);
}
extern "C" {
    pub fn N_VSpace_Serial(v: N_Vector, lrw: *mut sunindextype, liw: *mut sunindextype);
}
extern "C" {
    pub fn N_VGetArrayPointer_Serial(v: N_Vector) -> *mut realtype;
}
extern "C" {
    pub fn N_VSetArrayPointer_Serial(v_data: *mut realtype, v: N_Vector);
}
extern "C" {
    pub fn N_VLinearSum_Serial(a: realtype, x: N_Vector, b: realtype, y: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VConst_Serial(c: realtype, z: N_Vector);
}
extern "C" {
    pub fn N_VProd_Serial(x: N_Vector, y: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VDiv_Serial(x: N_Vector, y: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VScale_Serial(c: realtype, x: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VAbs_Serial(x: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VInv_Serial(x: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VAddConst_Serial(x: N_Vector, b: realtype, z: N_Vector);
}
extern "C" {
    pub fn N_VDotProd_Serial(x: N_Vector, y: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VMaxNorm_Serial(x: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VWrmsNorm_Serial(x: N_Vector, w: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VWrmsNormMask_Serial(x: N_Vector, w: N_Vector, id: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VMin_Serial(x: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VWL2Norm_Serial(x: N_Vector, w: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VL1Norm_Serial(x: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VCompare_Serial(c: realtype, x: N_Vector, z: N_Vector);
}
extern "C" {
    pub fn N_VInvTest_Serial(x: N_Vector, z: N_Vector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VConstrMask_Serial(c: N_Vector, x: N_Vector, m: N_Vector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VMinQuotient_Serial(num: N_Vector, denom: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VLinearCombination_Serial(
        nvec: ::std::os::raw::c_int,
        c: *mut realtype,
        V: *mut N_Vector,
        z: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VScaleAddMulti_Serial(
        nvec: ::std::os::raw::c_int,
        a: *mut realtype,
        x: N_Vector,
        Y: *mut N_Vector,
        Z: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VDotProdMulti_Serial(
        nvec: ::std::os::raw::c_int,
        x: N_Vector,
        Y: *mut N_Vector,
        dotprods: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VLinearSumVectorArray_Serial(
        nvec: ::std::os::raw::c_int,
        a: realtype,
        X: *mut N_Vector,
        b: realtype,
        Y: *mut N_Vector,
        Z: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VScaleVectorArray_Serial(
        nvec: ::std::os::raw::c_int,
        c: *mut realtype,
        X: *mut N_Vector,
        Z: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VConstVectorArray_Serial(
        nvecs: ::std::os::raw::c_int,
        c: realtype,
        Z: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VWrmsNormVectorArray_Serial(
        nvecs: ::std::os::raw::c_int,
        X: *mut N_Vector,
        W: *mut N_Vector,
        nrm: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VWrmsNormMaskVectorArray_Serial(
        nvecs: ::std::os::raw::c_int,
        X: *mut N_Vector,
        W: *mut N_Vector,
        id: N_Vector,
        nrm: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VScaleAddMultiVectorArray_Serial(
        nvec: ::std::os::raw::c_int,
        nsum: ::std::os::raw::c_int,
        a: *mut realtype,
        X: *mut N_Vector,
        Y: *mut *mut N_Vector,
        Z: *mut *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VLinearCombinationVectorArray_Serial(
        nvec: ::std::os::raw::c_int,
        nsum: ::std::os::raw::c_int,
        c: *mut realtype,
        X: *mut *mut N_Vector,
        Z: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VWSqrSumLocal_Serial(x: N_Vector, w: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VWSqrSumMaskLocal_Serial(x: N_Vector, w: N_Vector, id: N_Vector) -> realtype;
}
extern "C" {
    pub fn N_VEnableFusedOps_Serial(
        v: N_Vector,
        tf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VEnableLinearCombination_Serial(
        v: N_Vector,
        tf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VEnableScaleAddMulti_Serial(
        v: N_Vector,
        tf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VEnableDotProdMulti_Serial(
        v: N_Vector,
        tf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VEnableLinearSumVectorArray_Serial(
        v: N_Vector,
        tf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VEnableScaleVectorArray_Serial(
        v: N_Vector,
        tf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VEnableConstVectorArray_Serial(
        v: N_Vector,
        tf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VEnableWrmsNormVectorArray_Serial(
        v: N_Vector,
        tf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VEnableWrmsNormMaskVectorArray_Serial(
        v: N_Vector,
        tf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VEnableScaleAddMultiVectorArray_Serial(
        v: N_Vector,
        tf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn N_VEnableLinearCombinationVectorArray_Serial(
        v: N_Vector,
        tf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const PREC_NONE: _bindgen_ty_1 = 0;
pub const PREC_LEFT: _bindgen_ty_1 = 1;
pub const PREC_RIGHT: _bindgen_ty_1 = 2;
pub const PREC_BOTH: _bindgen_ty_1 = 3;
pub type _bindgen_ty_1 = i32;
pub const MODIFIED_GS: _bindgen_ty_2 = 1;
pub const CLASSICAL_GS: _bindgen_ty_2 = 2;
pub type _bindgen_ty_2 = i32;
pub type ATimesFn = ::std::option::Option<
    unsafe extern "C" fn(
        A_data: *mut ::std::os::raw::c_void,
        v: N_Vector,
        z: N_Vector,
    ) -> ::std::os::raw::c_int,
>;
pub type PSetupFn = ::std::option::Option<
    unsafe extern "C" fn(P_data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type PSolveFn = ::std::option::Option<
    unsafe extern "C" fn(
        P_data: *mut ::std::os::raw::c_void,
        r: N_Vector,
        z: N_Vector,
        tol: realtype,
        lr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ModifiedGS(
        v: *mut N_Vector,
        h: *mut *mut realtype,
        k: ::std::os::raw::c_int,
        p: ::std::os::raw::c_int,
        new_vk_norm: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ClassicalGS(
        v: *mut N_Vector,
        h: *mut *mut realtype,
        k: ::std::os::raw::c_int,
        p: ::std::os::raw::c_int,
        new_vk_norm: *mut realtype,
        stemp: *mut realtype,
        vtemp: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QRfact(
        n: ::std::os::raw::c_int,
        h: *mut *mut realtype,
        q: *mut realtype,
        job: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QRsol(
        n: ::std::os::raw::c_int,
        h: *mut *mut realtype,
        q: *mut realtype,
        b: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
pub const SUNMatrix_ID_SUNMATRIX_DENSE: SUNMatrix_ID = 0;
pub const SUNMatrix_ID_SUNMATRIX_BAND: SUNMatrix_ID = 1;
pub const SUNMatrix_ID_SUNMATRIX_SPARSE: SUNMatrix_ID = 2;
pub const SUNMatrix_ID_SUNMATRIX_SLUNRLOC: SUNMatrix_ID = 3;
pub const SUNMatrix_ID_SUNMATRIX_CUSPARSE: SUNMatrix_ID = 4;
pub const SUNMatrix_ID_SUNMATRIX_CUSTOM: SUNMatrix_ID = 5;
pub type SUNMatrix_ID = i32;
pub type SUNMatrix_Ops = *mut _generic_SUNMatrix_Ops;
pub type SUNMatrix = *mut _generic_SUNMatrix;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _generic_SUNMatrix_Ops {
    pub getid: ::std::option::Option<unsafe extern "C" fn(arg1: SUNMatrix) -> SUNMatrix_ID>,
    pub clone: ::std::option::Option<unsafe extern "C" fn(arg1: SUNMatrix) -> SUNMatrix>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: SUNMatrix)>,
    pub zero: ::std::option::Option<unsafe extern "C" fn(arg1: SUNMatrix) -> ::std::os::raw::c_int>,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(arg1: SUNMatrix, arg2: SUNMatrix) -> ::std::os::raw::c_int,
    >,
    pub scaleadd: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: realtype,
            arg2: SUNMatrix,
            arg3: SUNMatrix,
        ) -> ::std::os::raw::c_int,
    >,
    pub scaleaddi: ::std::option::Option<
        unsafe extern "C" fn(arg1: realtype, arg2: SUNMatrix) -> ::std::os::raw::c_int,
    >,
    pub matvecsetup:
        ::std::option::Option<unsafe extern "C" fn(arg1: SUNMatrix) -> ::std::os::raw::c_int>,
    pub matvec: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNMatrix,
            arg2: N_Vector,
            arg3: N_Vector,
        ) -> ::std::os::raw::c_int,
    >,
    pub space: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNMatrix,
            arg2: *mut ::std::os::raw::c_long,
            arg3: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__generic_SUNMatrix_Ops() {
    assert_eq!(
        ::std::mem::size_of::<_generic_SUNMatrix_Ops>(),
        80usize,
        concat!("Size of: ", stringify!(_generic_SUNMatrix_Ops))
    );
    assert_eq!(
        ::std::mem::align_of::<_generic_SUNMatrix_Ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_generic_SUNMatrix_Ops))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNMatrix_Ops>())).getid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix_Ops),
            "::",
            stringify!(getid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNMatrix_Ops>())).clone as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix_Ops),
            "::",
            stringify!(clone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNMatrix_Ops>())).destroy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix_Ops),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNMatrix_Ops>())).zero as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix_Ops),
            "::",
            stringify!(zero)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNMatrix_Ops>())).copy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix_Ops),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNMatrix_Ops>())).scaleadd as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix_Ops),
            "::",
            stringify!(scaleadd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNMatrix_Ops>())).scaleaddi as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix_Ops),
            "::",
            stringify!(scaleaddi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNMatrix_Ops>())).matvecsetup as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix_Ops),
            "::",
            stringify!(matvecsetup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNMatrix_Ops>())).matvec as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix_Ops),
            "::",
            stringify!(matvec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNMatrix_Ops>())).space as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix_Ops),
            "::",
            stringify!(space)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _generic_SUNMatrix {
    pub content: *mut ::std::os::raw::c_void,
    pub ops: SUNMatrix_Ops,
}
#[test]
fn bindgen_test_layout__generic_SUNMatrix() {
    assert_eq!(
        ::std::mem::size_of::<_generic_SUNMatrix>(),
        16usize,
        concat!("Size of: ", stringify!(_generic_SUNMatrix))
    );
    assert_eq!(
        ::std::mem::align_of::<_generic_SUNMatrix>(),
        8usize,
        concat!("Alignment of ", stringify!(_generic_SUNMatrix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNMatrix>())).content as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix),
            "::",
            stringify!(content)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNMatrix>())).ops as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNMatrix),
            "::",
            stringify!(ops)
        )
    );
}
extern "C" {
    pub fn SUNMatNewEmpty() -> SUNMatrix;
}
extern "C" {
    pub fn SUNMatFreeEmpty(A: SUNMatrix);
}
extern "C" {
    pub fn SUNMatCopyOps(A: SUNMatrix, B: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatGetID(A: SUNMatrix) -> SUNMatrix_ID;
}
extern "C" {
    pub fn SUNMatClone(A: SUNMatrix) -> SUNMatrix;
}
extern "C" {
    pub fn SUNMatDestroy(A: SUNMatrix);
}
extern "C" {
    pub fn SUNMatZero(A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatCopy(A: SUNMatrix, B: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatScaleAdd(c: realtype, A: SUNMatrix, B: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatScaleAddI(c: realtype, A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatMatvecSetup(A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatMatvec(A: SUNMatrix, x: N_Vector, y: N_Vector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatSpace(
        A: SUNMatrix,
        lenrw: *mut ::std::os::raw::c_long,
        leniw: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
pub const SUNLinearSolver_Type_SUNLINEARSOLVER_DIRECT: SUNLinearSolver_Type = 0;
pub const SUNLinearSolver_Type_SUNLINEARSOLVER_ITERATIVE: SUNLinearSolver_Type = 1;
pub const SUNLinearSolver_Type_SUNLINEARSOLVER_MATRIX_ITERATIVE: SUNLinearSolver_Type = 2;
pub type SUNLinearSolver_Type = i32;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_BAND: SUNLinearSolver_ID = 0;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_DENSE: SUNLinearSolver_ID = 1;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_KLU: SUNLinearSolver_ID = 2;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_LAPACKBAND: SUNLinearSolver_ID = 3;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_LAPACKDENSE: SUNLinearSolver_ID = 4;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_PCG: SUNLinearSolver_ID = 5;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_SPBCGS: SUNLinearSolver_ID = 6;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_SPFGMR: SUNLinearSolver_ID = 7;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_SPGMR: SUNLinearSolver_ID = 8;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_SPTFQMR: SUNLinearSolver_ID = 9;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_SUPERLUDIST: SUNLinearSolver_ID = 10;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_SUPERLUMT: SUNLinearSolver_ID = 11;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_CUSOLVERSP_BATCHQR: SUNLinearSolver_ID = 12;
pub const SUNLinearSolver_ID_SUNLINEARSOLVER_CUSTOM: SUNLinearSolver_ID = 13;
pub type SUNLinearSolver_ID = i32;
pub type SUNLinearSolver_Ops = *mut _generic_SUNLinearSolver_Ops;
pub type SUNLinearSolver = *mut _generic_SUNLinearSolver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _generic_SUNLinearSolver_Ops {
    pub gettype:
        ::std::option::Option<unsafe extern "C" fn(arg1: SUNLinearSolver) -> SUNLinearSolver_Type>,
    pub getid:
        ::std::option::Option<unsafe extern "C" fn(arg1: SUNLinearSolver) -> SUNLinearSolver_ID>,
    pub setatimes: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNLinearSolver,
            arg2: *mut ::std::os::raw::c_void,
            arg3: ATimesFn,
        ) -> ::std::os::raw::c_int,
    >,
    pub setpreconditioner: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNLinearSolver,
            arg2: *mut ::std::os::raw::c_void,
            arg3: PSetupFn,
            arg4: PSolveFn,
        ) -> ::std::os::raw::c_int,
    >,
    pub setscalingvectors: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNLinearSolver,
            arg2: N_Vector,
            arg3: N_Vector,
        ) -> ::std::os::raw::c_int,
    >,
    pub initialize:
        ::std::option::Option<unsafe extern "C" fn(arg1: SUNLinearSolver) -> ::std::os::raw::c_int>,
    pub setup: ::std::option::Option<
        unsafe extern "C" fn(arg1: SUNLinearSolver, arg2: SUNMatrix) -> ::std::os::raw::c_int,
    >,
    pub solve: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNLinearSolver,
            arg2: SUNMatrix,
            arg3: N_Vector,
            arg4: N_Vector,
            arg5: realtype,
        ) -> ::std::os::raw::c_int,
    >,
    pub numiters:
        ::std::option::Option<unsafe extern "C" fn(arg1: SUNLinearSolver) -> ::std::os::raw::c_int>,
    pub resnorm: ::std::option::Option<unsafe extern "C" fn(arg1: SUNLinearSolver) -> realtype>,
    pub lastflag:
        ::std::option::Option<unsafe extern "C" fn(arg1: SUNLinearSolver) -> sunindextype>,
    pub space: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNLinearSolver,
            arg2: *mut ::std::os::raw::c_long,
            arg3: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
    pub resid: ::std::option::Option<unsafe extern "C" fn(arg1: SUNLinearSolver) -> N_Vector>,
    pub free:
        ::std::option::Option<unsafe extern "C" fn(arg1: SUNLinearSolver) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout__generic_SUNLinearSolver_Ops() {
    assert_eq!(
        ::std::mem::size_of::<_generic_SUNLinearSolver_Ops>(),
        112usize,
        concat!("Size of: ", stringify!(_generic_SUNLinearSolver_Ops))
    );
    assert_eq!(
        ::std::mem::align_of::<_generic_SUNLinearSolver_Ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_generic_SUNLinearSolver_Ops))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).gettype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(gettype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).getid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(getid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).setatimes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(setatimes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).setpreconditioner as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(setpreconditioner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).setscalingvectors as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(setscalingvectors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).initialize as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).setup as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(setup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).solve as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(solve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).numiters as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(numiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).resnorm as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(resnorm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).lastflag as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(lastflag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).space as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).resid as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(resid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver_Ops>())).free as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver_Ops),
            "::",
            stringify!(free)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _generic_SUNLinearSolver {
    pub content: *mut ::std::os::raw::c_void,
    pub ops: SUNLinearSolver_Ops,
}
#[test]
fn bindgen_test_layout__generic_SUNLinearSolver() {
    assert_eq!(
        ::std::mem::size_of::<_generic_SUNLinearSolver>(),
        16usize,
        concat!("Size of: ", stringify!(_generic_SUNLinearSolver))
    );
    assert_eq!(
        ::std::mem::align_of::<_generic_SUNLinearSolver>(),
        8usize,
        concat!("Alignment of ", stringify!(_generic_SUNLinearSolver))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNLinearSolver>())).content as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver),
            "::",
            stringify!(content)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNLinearSolver>())).ops as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNLinearSolver),
            "::",
            stringify!(ops)
        )
    );
}
extern "C" {
    pub fn SUNLinSolNewEmpty() -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNLinSolFreeEmpty(S: SUNLinearSolver);
}
extern "C" {
    pub fn SUNLinSolGetType(S: SUNLinearSolver) -> SUNLinearSolver_Type;
}
extern "C" {
    pub fn SUNLinSolGetID(S: SUNLinearSolver) -> SUNLinearSolver_ID;
}
extern "C" {
    pub fn SUNLinSolSetATimes(
        S: SUNLinearSolver,
        A_data: *mut ::std::os::raw::c_void,
        ATimes: ATimesFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetPreconditioner(
        S: SUNLinearSolver,
        P_data: *mut ::std::os::raw::c_void,
        Pset: PSetupFn,
        Psol: PSolveFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetScalingVectors(
        S: SUNLinearSolver,
        s1: N_Vector,
        s2: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolInitialize(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetup(S: SUNLinearSolver, A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSolve(
        S: SUNLinearSolver,
        A: SUNMatrix,
        x: N_Vector,
        b: N_Vector,
        tol: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolNumIters(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolResNorm(S: SUNLinearSolver) -> realtype;
}
extern "C" {
    pub fn SUNLinSolResid(S: SUNLinearSolver) -> N_Vector;
}
extern "C" {
    pub fn SUNLinSolLastFlag(S: SUNLinearSolver) -> sunindextype;
}
extern "C" {
    pub fn SUNLinSolSpace(
        S: SUNLinearSolver,
        lenrwLS: *mut ::std::os::raw::c_long,
        leniwLS: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolFree(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DlsMat {
    pub type_: ::std::os::raw::c_int,
    pub M: sunindextype,
    pub N: sunindextype,
    pub ldim: sunindextype,
    pub mu: sunindextype,
    pub ml: sunindextype,
    pub s_mu: sunindextype,
    pub data: *mut realtype,
    pub ldata: sunindextype,
    pub cols: *mut *mut realtype,
}
#[test]
fn bindgen_test_layout__DlsMat() {
    assert_eq!(
        ::std::mem::size_of::<_DlsMat>(),
        56usize,
        concat!("Size of: ", stringify!(_DlsMat))
    );
    assert_eq!(
        ::std::mem::align_of::<_DlsMat>(),
        8usize,
        concat!("Alignment of ", stringify!(_DlsMat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DlsMat>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_DlsMat),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DlsMat>())).M as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_DlsMat),
            "::",
            stringify!(M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DlsMat>())).N as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_DlsMat),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DlsMat>())).ldim as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_DlsMat),
            "::",
            stringify!(ldim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DlsMat>())).mu as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_DlsMat),
            "::",
            stringify!(mu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DlsMat>())).ml as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_DlsMat),
            "::",
            stringify!(ml)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DlsMat>())).s_mu as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_DlsMat),
            "::",
            stringify!(s_mu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DlsMat>())).data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_DlsMat),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DlsMat>())).ldata as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_DlsMat),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_DlsMat>())).cols as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_DlsMat),
            "::",
            stringify!(cols)
        )
    );
}
pub type DlsMat = *mut _DlsMat;
extern "C" {
    pub fn NewDenseMat(M: sunindextype, N: sunindextype) -> DlsMat;
}
extern "C" {
    pub fn NewBandMat(
        N: sunindextype,
        mu: sunindextype,
        ml: sunindextype,
        smu: sunindextype,
    ) -> DlsMat;
}
extern "C" {
    pub fn DestroyMat(A: DlsMat);
}
extern "C" {
    pub fn NewIntArray(N: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn NewIndexArray(N: sunindextype) -> *mut sunindextype;
}
extern "C" {
    pub fn NewRealArray(N: sunindextype) -> *mut realtype;
}
extern "C" {
    pub fn DestroyArray(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn AddIdentity(A: DlsMat);
}
extern "C" {
    pub fn SetToZero(A: DlsMat);
}
extern "C" {
    pub fn PrintMat(A: DlsMat, outfile: *mut FILE);
}
extern "C" {
    pub fn newDenseMat(m: sunindextype, n: sunindextype) -> *mut *mut realtype;
}
extern "C" {
    pub fn newBandMat(n: sunindextype, smu: sunindextype, ml: sunindextype) -> *mut *mut realtype;
}
extern "C" {
    pub fn destroyMat(a: *mut *mut realtype);
}
extern "C" {
    pub fn newIntArray(n: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn newIndexArray(n: sunindextype) -> *mut sunindextype;
}
extern "C" {
    pub fn newRealArray(m: sunindextype) -> *mut realtype;
}
extern "C" {
    pub fn destroyArray(v: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn BandGBTRF(A: DlsMat, p: *mut sunindextype) -> sunindextype;
}
extern "C" {
    pub fn bandGBTRF(
        a: *mut *mut realtype,
        n: sunindextype,
        mu: sunindextype,
        ml: sunindextype,
        smu: sunindextype,
        p: *mut sunindextype,
    ) -> sunindextype;
}
extern "C" {
    pub fn BandGBTRS(A: DlsMat, p: *mut sunindextype, b: *mut realtype);
}
extern "C" {
    pub fn bandGBTRS(
        a: *mut *mut realtype,
        n: sunindextype,
        smu: sunindextype,
        ml: sunindextype,
        p: *mut sunindextype,
        b: *mut realtype,
    );
}
extern "C" {
    pub fn BandCopy(A: DlsMat, B: DlsMat, copymu: sunindextype, copyml: sunindextype);
}
extern "C" {
    pub fn bandCopy(
        a: *mut *mut realtype,
        b: *mut *mut realtype,
        n: sunindextype,
        a_smu: sunindextype,
        b_smu: sunindextype,
        copymu: sunindextype,
        copyml: sunindextype,
    );
}
extern "C" {
    pub fn BandScale(c: realtype, A: DlsMat);
}
extern "C" {
    pub fn bandScale(
        c: realtype,
        a: *mut *mut realtype,
        n: sunindextype,
        mu: sunindextype,
        ml: sunindextype,
        smu: sunindextype,
    );
}
extern "C" {
    pub fn bandAddIdentity(a: *mut *mut realtype, n: sunindextype, smu: sunindextype);
}
extern "C" {
    pub fn BandMatvec(A: DlsMat, x: *mut realtype, y: *mut realtype);
}
extern "C" {
    pub fn bandMatvec(
        a: *mut *mut realtype,
        x: *mut realtype,
        y: *mut realtype,
        n: sunindextype,
        mu: sunindextype,
        ml: sunindextype,
        smu: sunindextype,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNMatrixContent_Band {
    pub M: sunindextype,
    pub N: sunindextype,
    pub ldim: sunindextype,
    pub mu: sunindextype,
    pub ml: sunindextype,
    pub s_mu: sunindextype,
    pub data: *mut realtype,
    pub ldata: sunindextype,
    pub cols: *mut *mut realtype,
}
#[test]
fn bindgen_test_layout__SUNMatrixContent_Band() {
    assert_eq!(
        ::std::mem::size_of::<_SUNMatrixContent_Band>(),
        48usize,
        concat!("Size of: ", stringify!(_SUNMatrixContent_Band))
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNMatrixContent_Band>(),
        8usize,
        concat!("Alignment of ", stringify!(_SUNMatrixContent_Band))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Band>())).M as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Band),
            "::",
            stringify!(M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Band>())).N as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Band),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Band>())).ldim as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Band),
            "::",
            stringify!(ldim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Band>())).mu as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Band),
            "::",
            stringify!(mu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Band>())).ml as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Band),
            "::",
            stringify!(ml)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Band>())).s_mu as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Band),
            "::",
            stringify!(s_mu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Band>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Band),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Band>())).ldata as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Band),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Band>())).cols as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Band),
            "::",
            stringify!(cols)
        )
    );
}
pub type SUNMatrixContent_Band = *mut _SUNMatrixContent_Band;
extern "C" {
    pub fn SUNBandMatrix(N: sunindextype, mu: sunindextype, ml: sunindextype) -> SUNMatrix;
}
extern "C" {
    pub fn SUNBandMatrixStorage(
        N: sunindextype,
        mu: sunindextype,
        ml: sunindextype,
        smu: sunindextype,
    ) -> SUNMatrix;
}
extern "C" {
    pub fn SUNBandMatrix_Print(A: SUNMatrix, outfile: *mut FILE);
}
extern "C" {
    pub fn SUNBandMatrix_Rows(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNBandMatrix_Columns(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNBandMatrix_LowerBandwidth(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNBandMatrix_UpperBandwidth(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNBandMatrix_StoredUpperBandwidth(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNBandMatrix_LDim(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNBandMatrix_Data(A: SUNMatrix) -> *mut realtype;
}
extern "C" {
    pub fn SUNBandMatrix_Cols(A: SUNMatrix) -> *mut *mut realtype;
}
extern "C" {
    pub fn SUNBandMatrix_Column(A: SUNMatrix, j: sunindextype) -> *mut realtype;
}
extern "C" {
    pub fn SUNMatGetID_Band(A: SUNMatrix) -> SUNMatrix_ID;
}
extern "C" {
    pub fn SUNMatClone_Band(A: SUNMatrix) -> SUNMatrix;
}
extern "C" {
    pub fn SUNMatDestroy_Band(A: SUNMatrix);
}
extern "C" {
    pub fn SUNMatZero_Band(A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatCopy_Band(A: SUNMatrix, B: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatScaleAdd_Band(c: realtype, A: SUNMatrix, B: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatScaleAddI_Band(c: realtype, A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatMatvec_Band(A: SUNMatrix, x: N_Vector, y: N_Vector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatSpace_Band(
        A: SUNMatrix,
        lenrw: *mut ::std::os::raw::c_long,
        leniw: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNLinearSolverContent_Band {
    pub N: sunindextype,
    pub pivots: *mut sunindextype,
    pub last_flag: sunindextype,
}
#[test]
fn bindgen_test_layout__SUNLinearSolverContent_Band() {
    assert_eq!(
        ::std::mem::size_of::<_SUNLinearSolverContent_Band>(),
        24usize,
        concat!("Size of: ", stringify!(_SUNLinearSolverContent_Band))
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNLinearSolverContent_Band>(),
        8usize,
        concat!("Alignment of ", stringify!(_SUNLinearSolverContent_Band))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNLinearSolverContent_Band>())).N as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_Band),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_Band>())).pivots as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_Band),
            "::",
            stringify!(pivots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_Band>())).last_flag as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_Band),
            "::",
            stringify!(last_flag)
        )
    );
}
pub type SUNLinearSolverContent_Band = *mut _SUNLinearSolverContent_Band;
extern "C" {
    pub fn SUNLinSol_Band(y: N_Vector, A: SUNMatrix) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNBandLinearSolver(y: N_Vector, A: SUNMatrix) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNLinSolGetType_Band(S: SUNLinearSolver) -> SUNLinearSolver_Type;
}
extern "C" {
    pub fn SUNLinSolGetID_Band(S: SUNLinearSolver) -> SUNLinearSolver_ID;
}
extern "C" {
    pub fn SUNLinSolInitialize_Band(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetup_Band(S: SUNLinearSolver, A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSolve_Band(
        S: SUNLinearSolver,
        A: SUNMatrix,
        x: N_Vector,
        b: N_Vector,
        tol: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolLastFlag_Band(S: SUNLinearSolver) -> sunindextype;
}
extern "C" {
    pub fn SUNLinSolSpace_Band(
        S: SUNLinearSolver,
        lenrwLS: *mut ::std::os::raw::c_long,
        leniwLS: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolFree_Band(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNLinearSolverContent_SPBCGS {
    pub maxl: ::std::os::raw::c_int,
    pub pretype: ::std::os::raw::c_int,
    pub numiters: ::std::os::raw::c_int,
    pub resnorm: realtype,
    pub last_flag: ::std::os::raw::c_int,
    pub ATimes: ATimesFn,
    pub ATData: *mut ::std::os::raw::c_void,
    pub Psetup: PSetupFn,
    pub Psolve: PSolveFn,
    pub PData: *mut ::std::os::raw::c_void,
    pub s1: N_Vector,
    pub s2: N_Vector,
    pub r: N_Vector,
    pub r_star: N_Vector,
    pub p: N_Vector,
    pub q: N_Vector,
    pub u: N_Vector,
    pub Ap: N_Vector,
    pub vtemp: N_Vector,
    pub print_level: ::std::os::raw::c_int,
    pub info_file: *mut FILE,
}
#[test]
fn bindgen_test_layout__SUNLinearSolverContent_SPBCGS() {
    assert_eq!(
        ::std::mem::size_of::<_SUNLinearSolverContent_SPBCGS>(),
        152usize,
        concat!("Size of: ", stringify!(_SUNLinearSolverContent_SPBCGS))
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNLinearSolverContent_SPBCGS>(),
        8usize,
        concat!("Alignment of ", stringify!(_SUNLinearSolverContent_SPBCGS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).maxl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(maxl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).pretype as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(pretype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).numiters as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(numiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).resnorm as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(resnorm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).last_flag as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(last_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).ATimes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(ATimes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).ATData as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(ATData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).Psetup as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(Psetup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).Psolve as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(Psolve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).PData as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(PData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).s1 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).s2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).r as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).r_star as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(r_star)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).p as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).q as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).u as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).Ap as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(Ap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).vtemp as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(vtemp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).print_level as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(print_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPBCGS>())).info_file as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPBCGS),
            "::",
            stringify!(info_file)
        )
    );
}
pub type SUNLinearSolverContent_SPBCGS = *mut _SUNLinearSolverContent_SPBCGS;
extern "C" {
    pub fn SUNLinSol_SPBCGS(
        y: N_Vector,
        pretype: ::std::os::raw::c_int,
        maxl: ::std::os::raw::c_int,
    ) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNLinSol_SPBCGSSetPrecType(
        S: SUNLinearSolver,
        pretype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSol_SPBCGSSetMaxl(
        S: SUNLinearSolver,
        maxl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSPBCGS(
        y: N_Vector,
        pretype: ::std::os::raw::c_int,
        maxl: ::std::os::raw::c_int,
    ) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNSPBCGSSetPrecType(
        S: SUNLinearSolver,
        pretype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSPBCGSSetMaxl(
        S: SUNLinearSolver,
        maxl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolGetType_SPBCGS(S: SUNLinearSolver) -> SUNLinearSolver_Type;
}
extern "C" {
    pub fn SUNLinSolGetID_SPBCGS(S: SUNLinearSolver) -> SUNLinearSolver_ID;
}
extern "C" {
    pub fn SUNLinSolInitialize_SPBCGS(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetATimes_SPBCGS(
        S: SUNLinearSolver,
        A_data: *mut ::std::os::raw::c_void,
        ATimes: ATimesFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetPreconditioner_SPBCGS(
        S: SUNLinearSolver,
        P_data: *mut ::std::os::raw::c_void,
        Pset: PSetupFn,
        Psol: PSolveFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetScalingVectors_SPBCGS(
        S: SUNLinearSolver,
        s1: N_Vector,
        s2: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetup_SPBCGS(S: SUNLinearSolver, A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSolve_SPBCGS(
        S: SUNLinearSolver,
        A: SUNMatrix,
        x: N_Vector,
        b: N_Vector,
        tol: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolNumIters_SPBCGS(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolResNorm_SPBCGS(S: SUNLinearSolver) -> realtype;
}
extern "C" {
    pub fn SUNLinSolResid_SPBCGS(S: SUNLinearSolver) -> N_Vector;
}
extern "C" {
    pub fn SUNLinSolLastFlag_SPBCGS(S: SUNLinearSolver) -> sunindextype;
}
extern "C" {
    pub fn SUNLinSolSpace_SPBCGS(
        S: SUNLinearSolver,
        lenrwLS: *mut ::std::os::raw::c_long,
        leniwLS: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolFree_SPBCGS(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetInfoFile_SPBCGS(
        S: SUNLinearSolver,
        info_file: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetPrintLevel_SPBCGS(
        S: SUNLinearSolver,
        print_level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNLinearSolverContent_SPGMR {
    pub maxl: ::std::os::raw::c_int,
    pub pretype: ::std::os::raw::c_int,
    pub gstype: ::std::os::raw::c_int,
    pub max_restarts: ::std::os::raw::c_int,
    pub numiters: ::std::os::raw::c_int,
    pub resnorm: realtype,
    pub last_flag: ::std::os::raw::c_int,
    pub ATimes: ATimesFn,
    pub ATData: *mut ::std::os::raw::c_void,
    pub Psetup: PSetupFn,
    pub Psolve: PSolveFn,
    pub PData: *mut ::std::os::raw::c_void,
    pub s1: N_Vector,
    pub s2: N_Vector,
    pub V: *mut N_Vector,
    pub Hes: *mut *mut realtype,
    pub givens: *mut realtype,
    pub xcor: N_Vector,
    pub yg: *mut realtype,
    pub vtemp: N_Vector,
    pub cv: *mut realtype,
    pub Xv: *mut N_Vector,
    pub print_level: ::std::os::raw::c_int,
    pub info_file: *mut FILE,
}
#[test]
fn bindgen_test_layout__SUNLinearSolverContent_SPGMR() {
    assert_eq!(
        ::std::mem::size_of::<_SUNLinearSolverContent_SPGMR>(),
        168usize,
        concat!("Size of: ", stringify!(_SUNLinearSolverContent_SPGMR))
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNLinearSolverContent_SPGMR>(),
        8usize,
        concat!("Alignment of ", stringify!(_SUNLinearSolverContent_SPGMR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).maxl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(maxl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).pretype as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(pretype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).gstype as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(gstype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).max_restarts as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(max_restarts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).numiters as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(numiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).resnorm as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(resnorm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).last_flag as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(last_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).ATimes as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(ATimes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).ATData as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(ATData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).Psetup as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(Psetup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).Psolve as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(Psolve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).PData as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(PData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).s1 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).s2 as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).V as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(V)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).Hes as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(Hes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).givens as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(givens)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).xcor as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(xcor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).yg as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(yg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).vtemp as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(vtemp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).cv as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(cv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).Xv as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(Xv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).print_level as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(print_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPGMR>())).info_file as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPGMR),
            "::",
            stringify!(info_file)
        )
    );
}
pub type SUNLinearSolverContent_SPGMR = *mut _SUNLinearSolverContent_SPGMR;
extern "C" {
    pub fn SUNLinSol_SPGMR(
        y: N_Vector,
        pretype: ::std::os::raw::c_int,
        maxl: ::std::os::raw::c_int,
    ) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNLinSol_SPGMRSetPrecType(
        S: SUNLinearSolver,
        pretype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSol_SPGMRSetGSType(
        S: SUNLinearSolver,
        gstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSol_SPGMRSetMaxRestarts(
        S: SUNLinearSolver,
        maxrs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSPGMR(
        y: N_Vector,
        pretype: ::std::os::raw::c_int,
        maxl: ::std::os::raw::c_int,
    ) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNSPGMRSetPrecType(
        S: SUNLinearSolver,
        pretype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSPGMRSetGSType(
        S: SUNLinearSolver,
        gstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSPGMRSetMaxRestarts(
        S: SUNLinearSolver,
        maxrs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolGetType_SPGMR(S: SUNLinearSolver) -> SUNLinearSolver_Type;
}
extern "C" {
    pub fn SUNLinSolGetID_SPGMR(S: SUNLinearSolver) -> SUNLinearSolver_ID;
}
extern "C" {
    pub fn SUNLinSolInitialize_SPGMR(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetATimes_SPGMR(
        S: SUNLinearSolver,
        A_data: *mut ::std::os::raw::c_void,
        ATimes: ATimesFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetPreconditioner_SPGMR(
        S: SUNLinearSolver,
        P_data: *mut ::std::os::raw::c_void,
        Pset: PSetupFn,
        Psol: PSolveFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetScalingVectors_SPGMR(
        S: SUNLinearSolver,
        s1: N_Vector,
        s2: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetup_SPGMR(S: SUNLinearSolver, A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSolve_SPGMR(
        S: SUNLinearSolver,
        A: SUNMatrix,
        x: N_Vector,
        b: N_Vector,
        tol: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolNumIters_SPGMR(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolResNorm_SPGMR(S: SUNLinearSolver) -> realtype;
}
extern "C" {
    pub fn SUNLinSolResid_SPGMR(S: SUNLinearSolver) -> N_Vector;
}
extern "C" {
    pub fn SUNLinSolLastFlag_SPGMR(S: SUNLinearSolver) -> sunindextype;
}
extern "C" {
    pub fn SUNLinSolSpace_SPGMR(
        S: SUNLinearSolver,
        lenrwLS: *mut ::std::os::raw::c_long,
        leniwLS: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolFree_SPGMR(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetInfoFile_SPGMR(
        LS: SUNLinearSolver,
        info_file: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetPrintLevel_SPGMR(
        LS: SUNLinearSolver,
        print_level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DenseGETRF(A: DlsMat, p: *mut sunindextype) -> sunindextype;
}
extern "C" {
    pub fn DenseGETRS(A: DlsMat, p: *mut sunindextype, b: *mut realtype);
}
extern "C" {
    pub fn denseGETRF(
        a: *mut *mut realtype,
        m: sunindextype,
        n: sunindextype,
        p: *mut sunindextype,
    ) -> sunindextype;
}
extern "C" {
    pub fn denseGETRS(
        a: *mut *mut realtype,
        n: sunindextype,
        p: *mut sunindextype,
        b: *mut realtype,
    );
}
extern "C" {
    pub fn DensePOTRF(A: DlsMat) -> sunindextype;
}
extern "C" {
    pub fn DensePOTRS(A: DlsMat, b: *mut realtype);
}
extern "C" {
    pub fn densePOTRF(a: *mut *mut realtype, m: sunindextype) -> sunindextype;
}
extern "C" {
    pub fn densePOTRS(a: *mut *mut realtype, m: sunindextype, b: *mut realtype);
}
extern "C" {
    pub fn DenseGEQRF(A: DlsMat, beta: *mut realtype, wrk: *mut realtype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DenseORMQR(
        A: DlsMat,
        beta: *mut realtype,
        vn: *mut realtype,
        vm: *mut realtype,
        wrk: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn denseGEQRF(
        a: *mut *mut realtype,
        m: sunindextype,
        n: sunindextype,
        beta: *mut realtype,
        wrk: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn denseORMQR(
        a: *mut *mut realtype,
        m: sunindextype,
        n: sunindextype,
        beta: *mut realtype,
        v: *mut realtype,
        w: *mut realtype,
        wrk: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DenseCopy(A: DlsMat, B: DlsMat);
}
extern "C" {
    pub fn denseCopy(
        a: *mut *mut realtype,
        b: *mut *mut realtype,
        m: sunindextype,
        n: sunindextype,
    );
}
extern "C" {
    pub fn DenseScale(c: realtype, A: DlsMat);
}
extern "C" {
    pub fn denseScale(c: realtype, a: *mut *mut realtype, m: sunindextype, n: sunindextype);
}
extern "C" {
    pub fn denseAddIdentity(a: *mut *mut realtype, n: sunindextype);
}
extern "C" {
    pub fn DenseMatvec(A: DlsMat, x: *mut realtype, y: *mut realtype);
}
extern "C" {
    pub fn denseMatvec(
        a: *mut *mut realtype,
        x: *mut realtype,
        y: *mut realtype,
        m: sunindextype,
        n: sunindextype,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNMatrixContent_Dense {
    pub M: sunindextype,
    pub N: sunindextype,
    pub data: *mut realtype,
    pub ldata: sunindextype,
    pub cols: *mut *mut realtype,
}
#[test]
fn bindgen_test_layout__SUNMatrixContent_Dense() {
    assert_eq!(
        ::std::mem::size_of::<_SUNMatrixContent_Dense>(),
        32usize,
        concat!("Size of: ", stringify!(_SUNMatrixContent_Dense))
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNMatrixContent_Dense>(),
        8usize,
        concat!("Alignment of ", stringify!(_SUNMatrixContent_Dense))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Dense>())).M as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Dense),
            "::",
            stringify!(M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Dense>())).N as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Dense),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Dense>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Dense),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Dense>())).ldata as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Dense),
            "::",
            stringify!(ldata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Dense>())).cols as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Dense),
            "::",
            stringify!(cols)
        )
    );
}
pub type SUNMatrixContent_Dense = *mut _SUNMatrixContent_Dense;
extern "C" {
    pub fn SUNDenseMatrix(M: sunindextype, N: sunindextype) -> SUNMatrix;
}
extern "C" {
    pub fn SUNDenseMatrix_Print(A: SUNMatrix, outfile: *mut FILE);
}
extern "C" {
    pub fn SUNDenseMatrix_Rows(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNDenseMatrix_Columns(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNDenseMatrix_LData(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNDenseMatrix_Data(A: SUNMatrix) -> *mut realtype;
}
extern "C" {
    pub fn SUNDenseMatrix_Cols(A: SUNMatrix) -> *mut *mut realtype;
}
extern "C" {
    pub fn SUNDenseMatrix_Column(A: SUNMatrix, j: sunindextype) -> *mut realtype;
}
extern "C" {
    pub fn SUNMatGetID_Dense(A: SUNMatrix) -> SUNMatrix_ID;
}
extern "C" {
    pub fn SUNMatClone_Dense(A: SUNMatrix) -> SUNMatrix;
}
extern "C" {
    pub fn SUNMatDestroy_Dense(A: SUNMatrix);
}
extern "C" {
    pub fn SUNMatZero_Dense(A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatCopy_Dense(A: SUNMatrix, B: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatScaleAdd_Dense(c: realtype, A: SUNMatrix, B: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatScaleAddI_Dense(c: realtype, A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatMatvec_Dense(A: SUNMatrix, x: N_Vector, y: N_Vector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatSpace_Dense(
        A: SUNMatrix,
        lenrw: *mut ::std::os::raw::c_long,
        leniw: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNLinearSolverContent_Dense {
    pub N: sunindextype,
    pub pivots: *mut sunindextype,
    pub last_flag: sunindextype,
}
#[test]
fn bindgen_test_layout__SUNLinearSolverContent_Dense() {
    assert_eq!(
        ::std::mem::size_of::<_SUNLinearSolverContent_Dense>(),
        24usize,
        concat!("Size of: ", stringify!(_SUNLinearSolverContent_Dense))
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNLinearSolverContent_Dense>(),
        8usize,
        concat!("Alignment of ", stringify!(_SUNLinearSolverContent_Dense))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNLinearSolverContent_Dense>())).N as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_Dense),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_Dense>())).pivots as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_Dense),
            "::",
            stringify!(pivots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_Dense>())).last_flag as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_Dense),
            "::",
            stringify!(last_flag)
        )
    );
}
pub type SUNLinearSolverContent_Dense = *mut _SUNLinearSolverContent_Dense;
extern "C" {
    pub fn SUNLinSol_Dense(y: N_Vector, A: SUNMatrix) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNDenseLinearSolver(y: N_Vector, A: SUNMatrix) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNLinSolGetType_Dense(S: SUNLinearSolver) -> SUNLinearSolver_Type;
}
extern "C" {
    pub fn SUNLinSolGetID_Dense(S: SUNLinearSolver) -> SUNLinearSolver_ID;
}
extern "C" {
    pub fn SUNLinSolInitialize_Dense(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetup_Dense(S: SUNLinearSolver, A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSolve_Dense(
        S: SUNLinearSolver,
        A: SUNMatrix,
        x: N_Vector,
        b: N_Vector,
        tol: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolLastFlag_Dense(S: SUNLinearSolver) -> sunindextype;
}
extern "C" {
    pub fn SUNLinSolSpace_Dense(
        S: SUNLinearSolver,
        lenrwLS: *mut ::std::os::raw::c_long,
        leniwLS: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolFree_Dense(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNLinearSolverContent_PCG {
    pub maxl: ::std::os::raw::c_int,
    pub pretype: ::std::os::raw::c_int,
    pub numiters: ::std::os::raw::c_int,
    pub resnorm: realtype,
    pub last_flag: ::std::os::raw::c_int,
    pub ATimes: ATimesFn,
    pub ATData: *mut ::std::os::raw::c_void,
    pub Psetup: PSetupFn,
    pub Psolve: PSolveFn,
    pub PData: *mut ::std::os::raw::c_void,
    pub s: N_Vector,
    pub r: N_Vector,
    pub p: N_Vector,
    pub z: N_Vector,
    pub Ap: N_Vector,
    pub print_level: ::std::os::raw::c_int,
    pub info_file: *mut FILE,
}
#[test]
fn bindgen_test_layout__SUNLinearSolverContent_PCG() {
    assert_eq!(
        ::std::mem::size_of::<_SUNLinearSolverContent_PCG>(),
        120usize,
        concat!("Size of: ", stringify!(_SUNLinearSolverContent_PCG))
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNLinearSolverContent_PCG>(),
        8usize,
        concat!("Alignment of ", stringify!(_SUNLinearSolverContent_PCG))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).maxl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(maxl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).pretype as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(pretype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).numiters as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(numiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).resnorm as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(resnorm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).last_flag as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(last_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).ATimes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(ATimes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).ATData as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(ATData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).Psetup as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(Psetup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).Psolve as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(Psolve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).PData as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(PData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).s as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).r as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).p as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).z as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).Ap as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(Ap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).print_level as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(print_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_PCG>())).info_file as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_PCG),
            "::",
            stringify!(info_file)
        )
    );
}
pub type SUNLinearSolverContent_PCG = *mut _SUNLinearSolverContent_PCG;
extern "C" {
    pub fn SUNLinSol_PCG(
        y: N_Vector,
        pretype: ::std::os::raw::c_int,
        maxl: ::std::os::raw::c_int,
    ) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNLinSol_PCGSetPrecType(
        S: SUNLinearSolver,
        pretype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSol_PCGSetMaxl(
        S: SUNLinearSolver,
        maxl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNPCG(
        y: N_Vector,
        pretype: ::std::os::raw::c_int,
        maxl: ::std::os::raw::c_int,
    ) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNPCGSetPrecType(
        S: SUNLinearSolver,
        pretype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNPCGSetMaxl(S: SUNLinearSolver, maxl: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolGetType_PCG(S: SUNLinearSolver) -> SUNLinearSolver_Type;
}
extern "C" {
    pub fn SUNLinSolGetID_PCG(S: SUNLinearSolver) -> SUNLinearSolver_ID;
}
extern "C" {
    pub fn SUNLinSolInitialize_PCG(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetATimes_PCG(
        S: SUNLinearSolver,
        A_data: *mut ::std::os::raw::c_void,
        ATimes: ATimesFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetPreconditioner_PCG(
        S: SUNLinearSolver,
        P_data: *mut ::std::os::raw::c_void,
        Pset: PSetupFn,
        Psol: PSolveFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetScalingVectors_PCG(
        S: SUNLinearSolver,
        s: N_Vector,
        nul: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetup_PCG(S: SUNLinearSolver, nul: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSolve_PCG(
        S: SUNLinearSolver,
        nul: SUNMatrix,
        x: N_Vector,
        b: N_Vector,
        tol: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolNumIters_PCG(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolResNorm_PCG(S: SUNLinearSolver) -> realtype;
}
extern "C" {
    pub fn SUNLinSolResid_PCG(S: SUNLinearSolver) -> N_Vector;
}
extern "C" {
    pub fn SUNLinSolLastFlag_PCG(S: SUNLinearSolver) -> sunindextype;
}
extern "C" {
    pub fn SUNLinSolSpace_PCG(
        S: SUNLinearSolver,
        lenrwLS: *mut ::std::os::raw::c_long,
        leniwLS: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolFree_PCG(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetInfoFile_PCG(
        LS: SUNLinearSolver,
        info_file: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetPrintLevel_PCG(
        LS: SUNLinearSolver,
        print_level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNLinearSolverContent_SPFGMR {
    pub maxl: ::std::os::raw::c_int,
    pub pretype: ::std::os::raw::c_int,
    pub gstype: ::std::os::raw::c_int,
    pub max_restarts: ::std::os::raw::c_int,
    pub numiters: ::std::os::raw::c_int,
    pub resnorm: realtype,
    pub last_flag: ::std::os::raw::c_int,
    pub ATimes: ATimesFn,
    pub ATData: *mut ::std::os::raw::c_void,
    pub Psetup: PSetupFn,
    pub Psolve: PSolveFn,
    pub PData: *mut ::std::os::raw::c_void,
    pub s1: N_Vector,
    pub s2: N_Vector,
    pub V: *mut N_Vector,
    pub Z: *mut N_Vector,
    pub Hes: *mut *mut realtype,
    pub givens: *mut realtype,
    pub xcor: N_Vector,
    pub yg: *mut realtype,
    pub vtemp: N_Vector,
    pub cv: *mut realtype,
    pub Xv: *mut N_Vector,
    pub print_level: ::std::os::raw::c_int,
    pub info_file: *mut FILE,
}
#[test]
fn bindgen_test_layout__SUNLinearSolverContent_SPFGMR() {
    assert_eq!(
        ::std::mem::size_of::<_SUNLinearSolverContent_SPFGMR>(),
        176usize,
        concat!("Size of: ", stringify!(_SUNLinearSolverContent_SPFGMR))
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNLinearSolverContent_SPFGMR>(),
        8usize,
        concat!("Alignment of ", stringify!(_SUNLinearSolverContent_SPFGMR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).maxl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(maxl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).pretype as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(pretype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).gstype as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(gstype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).max_restarts as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(max_restarts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).numiters as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(numiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).resnorm as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(resnorm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).last_flag as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(last_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).ATimes as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(ATimes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).ATData as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(ATData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).Psetup as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(Psetup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).Psolve as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(Psolve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).PData as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(PData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).s1 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).s2 as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).V as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(V)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).Z as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(Z)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).Hes as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(Hes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).givens as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(givens)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).xcor as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(xcor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).yg as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(yg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).vtemp as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(vtemp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).cv as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(cv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).Xv as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(Xv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).print_level as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(print_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPFGMR>())).info_file as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPFGMR),
            "::",
            stringify!(info_file)
        )
    );
}
pub type SUNLinearSolverContent_SPFGMR = *mut _SUNLinearSolverContent_SPFGMR;
extern "C" {
    pub fn SUNLinSol_SPFGMR(
        y: N_Vector,
        pretype: ::std::os::raw::c_int,
        maxl: ::std::os::raw::c_int,
    ) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNLinSol_SPFGMRSetPrecType(
        S: SUNLinearSolver,
        pretype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSol_SPFGMRSetGSType(
        S: SUNLinearSolver,
        gstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSol_SPFGMRSetMaxRestarts(
        S: SUNLinearSolver,
        maxrs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSPFGMR(
        y: N_Vector,
        pretype: ::std::os::raw::c_int,
        maxl: ::std::os::raw::c_int,
    ) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNSPFGMRSetPrecType(
        S: SUNLinearSolver,
        pretype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSPFGMRSetGSType(
        S: SUNLinearSolver,
        gstype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSPFGMRSetMaxRestarts(
        S: SUNLinearSolver,
        maxrs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolGetType_SPFGMR(S: SUNLinearSolver) -> SUNLinearSolver_Type;
}
extern "C" {
    pub fn SUNLinSolGetID_SPFGMR(S: SUNLinearSolver) -> SUNLinearSolver_ID;
}
extern "C" {
    pub fn SUNLinSolInitialize_SPFGMR(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetATimes_SPFGMR(
        S: SUNLinearSolver,
        A_data: *mut ::std::os::raw::c_void,
        ATimes: ATimesFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetPreconditioner_SPFGMR(
        S: SUNLinearSolver,
        P_data: *mut ::std::os::raw::c_void,
        Pset: PSetupFn,
        Psol: PSolveFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetScalingVectors_SPFGMR(
        S: SUNLinearSolver,
        s1: N_Vector,
        s2: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetup_SPFGMR(S: SUNLinearSolver, A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSolve_SPFGMR(
        S: SUNLinearSolver,
        A: SUNMatrix,
        x: N_Vector,
        b: N_Vector,
        tol: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolNumIters_SPFGMR(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolResNorm_SPFGMR(S: SUNLinearSolver) -> realtype;
}
extern "C" {
    pub fn SUNLinSolResid_SPFGMR(S: SUNLinearSolver) -> N_Vector;
}
extern "C" {
    pub fn SUNLinSolLastFlag_SPFGMR(S: SUNLinearSolver) -> sunindextype;
}
extern "C" {
    pub fn SUNLinSolSpace_SPFGMR(
        S: SUNLinearSolver,
        lenrwLS: *mut ::std::os::raw::c_long,
        leniwLS: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolFree_SPFGMR(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetInfoFile_SPFGMR(
        LS: SUNLinearSolver,
        info_file: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetPrintLevel_SPFGMR(
        LS: SUNLinearSolver,
        print_level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNLinearSolverContent_SPTFQMR {
    pub maxl: ::std::os::raw::c_int,
    pub pretype: ::std::os::raw::c_int,
    pub numiters: ::std::os::raw::c_int,
    pub resnorm: realtype,
    pub last_flag: ::std::os::raw::c_int,
    pub ATimes: ATimesFn,
    pub ATData: *mut ::std::os::raw::c_void,
    pub Psetup: PSetupFn,
    pub Psolve: PSolveFn,
    pub PData: *mut ::std::os::raw::c_void,
    pub s1: N_Vector,
    pub s2: N_Vector,
    pub r_star: N_Vector,
    pub q: N_Vector,
    pub d: N_Vector,
    pub v: N_Vector,
    pub p: N_Vector,
    pub r: *mut N_Vector,
    pub u: N_Vector,
    pub vtemp1: N_Vector,
    pub vtemp2: N_Vector,
    pub vtemp3: N_Vector,
    pub print_level: ::std::os::raw::c_int,
    pub info_file: *mut FILE,
}
#[test]
fn bindgen_test_layout__SUNLinearSolverContent_SPTFQMR() {
    assert_eq!(
        ::std::mem::size_of::<_SUNLinearSolverContent_SPTFQMR>(),
        176usize,
        concat!("Size of: ", stringify!(_SUNLinearSolverContent_SPTFQMR))
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNLinearSolverContent_SPTFQMR>(),
        8usize,
        concat!("Alignment of ", stringify!(_SUNLinearSolverContent_SPTFQMR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).maxl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(maxl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).pretype as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(pretype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).numiters as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(numiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).resnorm as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(resnorm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).last_flag as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(last_flag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).ATimes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(ATimes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).ATData as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(ATData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).Psetup as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(Psetup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).Psolve as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(Psolve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).PData as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(PData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).s1 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(s1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).s2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(s2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).r_star as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(r_star)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).q as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).d as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).v as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).p as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).r as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).u as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).vtemp1 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(vtemp1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).vtemp2 as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(vtemp2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).vtemp3 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(vtemp3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).print_level as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(print_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNLinearSolverContent_SPTFQMR>())).info_file as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNLinearSolverContent_SPTFQMR),
            "::",
            stringify!(info_file)
        )
    );
}
pub type SUNLinearSolverContent_SPTFQMR = *mut _SUNLinearSolverContent_SPTFQMR;
extern "C" {
    pub fn SUNLinSol_SPTFQMR(
        y: N_Vector,
        pretype: ::std::os::raw::c_int,
        maxl: ::std::os::raw::c_int,
    ) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNLinSol_SPTFQMRSetPrecType(
        S: SUNLinearSolver,
        pretype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSol_SPTFQMRSetMaxl(
        S: SUNLinearSolver,
        maxl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSPTFQMR(
        y: N_Vector,
        pretype: ::std::os::raw::c_int,
        maxl: ::std::os::raw::c_int,
    ) -> SUNLinearSolver;
}
extern "C" {
    pub fn SUNSPTFQMRSetPrecType(
        S: SUNLinearSolver,
        pretype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSPTFQMRSetMaxl(
        S: SUNLinearSolver,
        maxl: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolGetType_SPTFQMR(S: SUNLinearSolver) -> SUNLinearSolver_Type;
}
extern "C" {
    pub fn SUNLinSolGetID_SPTFQMR(S: SUNLinearSolver) -> SUNLinearSolver_ID;
}
extern "C" {
    pub fn SUNLinSolInitialize_SPTFQMR(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetATimes_SPTFQMR(
        S: SUNLinearSolver,
        A_data: *mut ::std::os::raw::c_void,
        ATimes: ATimesFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetPreconditioner_SPTFQMR(
        S: SUNLinearSolver,
        P_data: *mut ::std::os::raw::c_void,
        Pset: PSetupFn,
        Psol: PSolveFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetScalingVectors_SPTFQMR(
        S: SUNLinearSolver,
        s1: N_Vector,
        s2: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetup_SPTFQMR(S: SUNLinearSolver, A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSolve_SPTFQMR(
        S: SUNLinearSolver,
        A: SUNMatrix,
        x: N_Vector,
        b: N_Vector,
        tol: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolNumIters_SPTFQMR(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolResNorm_SPTFQMR(S: SUNLinearSolver) -> realtype;
}
extern "C" {
    pub fn SUNLinSolResid_SPTFQMR(S: SUNLinearSolver) -> N_Vector;
}
extern "C" {
    pub fn SUNLinSolLastFlag_SPTFQMR(S: SUNLinearSolver) -> sunindextype;
}
extern "C" {
    pub fn SUNLinSolSpace_SPTFQMR(
        S: SUNLinearSolver,
        lenrwLS: *mut ::std::os::raw::c_long,
        leniwLS: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolFree_SPTFQMR(S: SUNLinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetInfoFile_SPTFQMR(
        LS: SUNLinearSolver,
        info_file: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNLinSolSetPrintLevel_SPTFQMR(
        LS: SUNLinearSolver,
        print_level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNMatrixContent_Sparse {
    pub M: sunindextype,
    pub N: sunindextype,
    pub NNZ: sunindextype,
    pub NP: sunindextype,
    pub data: *mut realtype,
    pub sparsetype: ::std::os::raw::c_int,
    pub indexvals: *mut sunindextype,
    pub indexptrs: *mut sunindextype,
    pub rowvals: *mut *mut sunindextype,
    pub colptrs: *mut *mut sunindextype,
    pub colvals: *mut *mut sunindextype,
    pub rowptrs: *mut *mut sunindextype,
}
#[test]
fn bindgen_test_layout__SUNMatrixContent_Sparse() {
    assert_eq!(
        ::std::mem::size_of::<_SUNMatrixContent_Sparse>(),
        80usize,
        concat!("Size of: ", stringify!(_SUNMatrixContent_Sparse))
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNMatrixContent_Sparse>(),
        8usize,
        concat!("Alignment of ", stringify!(_SUNMatrixContent_Sparse))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).M as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(M)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).N as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).NNZ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(NNZ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).NP as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(NP)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).sparsetype as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(sparsetype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).indexvals as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(indexvals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).indexptrs as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(indexptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).rowvals as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(rowvals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).colptrs as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(colptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).colvals as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(colvals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNMatrixContent_Sparse>())).rowptrs as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNMatrixContent_Sparse),
            "::",
            stringify!(rowptrs)
        )
    );
}
pub type SUNMatrixContent_Sparse = *mut _SUNMatrixContent_Sparse;
extern "C" {
    pub fn SUNSparseMatrix(
        M: sunindextype,
        N: sunindextype,
        NNZ: sunindextype,
        sparsetype: ::std::os::raw::c_int,
    ) -> SUNMatrix;
}
extern "C" {
    pub fn SUNSparseFromDenseMatrix(
        A: SUNMatrix,
        droptol: realtype,
        sparsetype: ::std::os::raw::c_int,
    ) -> SUNMatrix;
}
extern "C" {
    pub fn SUNSparseFromBandMatrix(
        A: SUNMatrix,
        droptol: realtype,
        sparsetype: ::std::os::raw::c_int,
    ) -> SUNMatrix;
}
extern "C" {
    pub fn SUNSparseMatrix_ToCSR(A: SUNMatrix, Bout: *mut SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSparseMatrix_ToCSC(A: SUNMatrix, Bout: *mut SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSparseMatrix_Realloc(A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSparseMatrix_Reallocate(A: SUNMatrix, NNZ: sunindextype) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSparseMatrix_Print(A: SUNMatrix, outfile: *mut FILE);
}
extern "C" {
    pub fn SUNSparseMatrix_Rows(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNSparseMatrix_Columns(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNSparseMatrix_NNZ(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNSparseMatrix_NP(A: SUNMatrix) -> sunindextype;
}
extern "C" {
    pub fn SUNSparseMatrix_SparseType(A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNSparseMatrix_Data(A: SUNMatrix) -> *mut realtype;
}
extern "C" {
    pub fn SUNSparseMatrix_IndexValues(A: SUNMatrix) -> *mut sunindextype;
}
extern "C" {
    pub fn SUNSparseMatrix_IndexPointers(A: SUNMatrix) -> *mut sunindextype;
}
extern "C" {
    pub fn SUNMatGetID_Sparse(A: SUNMatrix) -> SUNMatrix_ID;
}
extern "C" {
    pub fn SUNMatClone_Sparse(A: SUNMatrix) -> SUNMatrix;
}
extern "C" {
    pub fn SUNMatDestroy_Sparse(A: SUNMatrix);
}
extern "C" {
    pub fn SUNMatZero_Sparse(A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatCopy_Sparse(A: SUNMatrix, B: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatScaleAdd_Sparse(c: realtype, A: SUNMatrix, B: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatScaleAddI_Sparse(c: realtype, A: SUNMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatMatvec_Sparse(A: SUNMatrix, x: N_Vector, y: N_Vector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNMatSpace_Sparse(
        A: SUNMatrix,
        lenrw: *mut ::std::os::raw::c_long,
        leniw: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
pub type SUNNonlinearSolver_Ops = *mut _generic_SUNNonlinearSolver_Ops;
pub type SUNNonlinearSolver = *mut _generic_SUNNonlinearSolver;
pub type SUNNonlinSolSysFn = ::std::option::Option<
    unsafe extern "C" fn(
        y: N_Vector,
        F: N_Vector,
        mem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type SUNNonlinSolLSetupFn = ::std::option::Option<
    unsafe extern "C" fn(
        jbad: ::std::os::raw::c_int,
        jcur: *mut ::std::os::raw::c_int,
        mem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type SUNNonlinSolLSolveFn = ::std::option::Option<
    unsafe extern "C" fn(b: N_Vector, mem: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type SUNNonlinSolConvTestFn = ::std::option::Option<
    unsafe extern "C" fn(
        NLS: SUNNonlinearSolver,
        y: N_Vector,
        del: N_Vector,
        tol: realtype,
        ewt: N_Vector,
        mem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub const SUNNonlinearSolver_Type_SUNNONLINEARSOLVER_ROOTFIND: SUNNonlinearSolver_Type = 0;
pub const SUNNonlinearSolver_Type_SUNNONLINEARSOLVER_FIXEDPOINT: SUNNonlinearSolver_Type = 1;
pub type SUNNonlinearSolver_Type = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _generic_SUNNonlinearSolver_Ops {
    pub gettype: ::std::option::Option<
        unsafe extern "C" fn(arg1: SUNNonlinearSolver) -> SUNNonlinearSolver_Type,
    >,
    pub initialize: ::std::option::Option<
        unsafe extern "C" fn(arg1: SUNNonlinearSolver) -> ::std::os::raw::c_int,
    >,
    pub setup: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNNonlinearSolver,
            arg2: N_Vector,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub solve: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNNonlinearSolver,
            arg2: N_Vector,
            arg3: N_Vector,
            arg4: N_Vector,
            arg5: realtype,
            arg6: ::std::os::raw::c_int,
            arg7: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(arg1: SUNNonlinearSolver) -> ::std::os::raw::c_int,
    >,
    pub setsysfn: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNNonlinearSolver,
            arg2: SUNNonlinSolSysFn,
        ) -> ::std::os::raw::c_int,
    >,
    pub setlsetupfn: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNNonlinearSolver,
            arg2: SUNNonlinSolLSetupFn,
        ) -> ::std::os::raw::c_int,
    >,
    pub setlsolvefn: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNNonlinearSolver,
            arg2: SUNNonlinSolLSolveFn,
        ) -> ::std::os::raw::c_int,
    >,
    pub setctestfn: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNNonlinearSolver,
            arg2: SUNNonlinSolConvTestFn,
            arg3: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub setmaxiters: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNNonlinearSolver,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub getnumiters: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNNonlinearSolver,
            arg2: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
    pub getcuriter: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNNonlinearSolver,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub getnumconvfails: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: SUNNonlinearSolver,
            arg2: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout__generic_SUNNonlinearSolver_Ops() {
    assert_eq!(
        ::std::mem::size_of::<_generic_SUNNonlinearSolver_Ops>(),
        104usize,
        concat!("Size of: ", stringify!(_generic_SUNNonlinearSolver_Ops))
    );
    assert_eq!(
        ::std::mem::align_of::<_generic_SUNNonlinearSolver_Ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_generic_SUNNonlinearSolver_Ops))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).gettype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(gettype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).initialize as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(initialize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).setup as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(setup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).solve as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(solve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).free as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).setsysfn as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(setsysfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).setlsetupfn as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(setlsetupfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).setlsolvefn as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(setlsolvefn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).setctestfn as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(setctestfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).setmaxiters as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(setmaxiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).getnumiters as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(getnumiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).getcuriter as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(getcuriter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver_Ops>())).getnumconvfails as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver_Ops),
            "::",
            stringify!(getnumconvfails)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _generic_SUNNonlinearSolver {
    pub content: *mut ::std::os::raw::c_void,
    pub ops: SUNNonlinearSolver_Ops,
}
#[test]
fn bindgen_test_layout__generic_SUNNonlinearSolver() {
    assert_eq!(
        ::std::mem::size_of::<_generic_SUNNonlinearSolver>(),
        16usize,
        concat!("Size of: ", stringify!(_generic_SUNNonlinearSolver))
    );
    assert_eq!(
        ::std::mem::align_of::<_generic_SUNNonlinearSolver>(),
        8usize,
        concat!("Alignment of ", stringify!(_generic_SUNNonlinearSolver))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_generic_SUNNonlinearSolver>())).content as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver),
            "::",
            stringify!(content)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_generic_SUNNonlinearSolver>())).ops as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_generic_SUNNonlinearSolver),
            "::",
            stringify!(ops)
        )
    );
}
extern "C" {
    pub fn SUNNonlinSolNewEmpty() -> SUNNonlinearSolver;
}
extern "C" {
    pub fn SUNNonlinSolFreeEmpty(NLS: SUNNonlinearSolver);
}
extern "C" {
    pub fn SUNNonlinSolGetType(NLS: SUNNonlinearSolver) -> SUNNonlinearSolver_Type;
}
extern "C" {
    pub fn SUNNonlinSolInitialize(NLS: SUNNonlinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetup(
        NLS: SUNNonlinearSolver,
        y: N_Vector,
        mem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSolve(
        NLS: SUNNonlinearSolver,
        y0: N_Vector,
        y: N_Vector,
        w: N_Vector,
        tol: realtype,
        callLSetup: ::std::os::raw::c_int,
        mem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolFree(NLS: SUNNonlinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetSysFn(
        NLS: SUNNonlinearSolver,
        SysFn: SUNNonlinSolSysFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetLSetupFn(
        NLS: SUNNonlinearSolver,
        SetupFn: SUNNonlinSolLSetupFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetLSolveFn(
        NLS: SUNNonlinearSolver,
        SolveFn: SUNNonlinSolLSolveFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetConvTestFn(
        NLS: SUNNonlinearSolver,
        CTestFn: SUNNonlinSolConvTestFn,
        ctest_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetMaxIters(
        NLS: SUNNonlinearSolver,
        maxiters: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolGetNumIters(
        NLS: SUNNonlinearSolver,
        niters: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolGetCurIter(
        NLS: SUNNonlinearSolver,
        iter: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolGetNumConvFails(
        NLS: SUNNonlinearSolver,
        nconvfails: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNNonlinearSolverContent_FixedPoint {
    pub Sys: SUNNonlinSolSysFn,
    pub CTest: SUNNonlinSolConvTestFn,
    pub m: ::std::os::raw::c_int,
    pub imap: *mut ::std::os::raw::c_int,
    pub damping: ::std::os::raw::c_int,
    pub beta: realtype,
    pub R: *mut realtype,
    pub gamma: *mut realtype,
    pub cvals: *mut realtype,
    pub df: *mut N_Vector,
    pub dg: *mut N_Vector,
    pub q: *mut N_Vector,
    pub Xvecs: *mut N_Vector,
    pub yprev: N_Vector,
    pub gy: N_Vector,
    pub fold: N_Vector,
    pub gold: N_Vector,
    pub delta: N_Vector,
    pub curiter: ::std::os::raw::c_int,
    pub maxiters: ::std::os::raw::c_int,
    pub niters: ::std::os::raw::c_long,
    pub nconvfails: ::std::os::raw::c_long,
    pub ctest_data: *mut ::std::os::raw::c_void,
    pub print_level: ::std::os::raw::c_int,
    pub info_file: *mut FILE,
}
#[test]
fn bindgen_test_layout__SUNNonlinearSolverContent_FixedPoint() {
    assert_eq!(
        ::std::mem::size_of::<_SUNNonlinearSolverContent_FixedPoint>(),
        176usize,
        concat!(
            "Size of: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNNonlinearSolverContent_FixedPoint>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).Sys as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(Sys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).CTest as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(CTest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).m as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).imap as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(imap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).damping as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(damping)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).beta as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(beta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).R as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(R)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).gamma as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(gamma)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).cvals as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(cvals)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).df as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(df)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).dg as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(dg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).q as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(q)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).Xvecs as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(Xvecs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).yprev as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(yprev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).gy as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(gy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).fold as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(fold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).gold as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(gold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).delta as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).curiter as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(curiter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).maxiters as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(maxiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).niters as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(niters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).nconvfails as *const _
                as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(nconvfails)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).ctest_data as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(ctest_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).print_level
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(print_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_FixedPoint>())).info_file as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_FixedPoint),
            "::",
            stringify!(info_file)
        )
    );
}
pub type SUNNonlinearSolverContent_FixedPoint = *mut _SUNNonlinearSolverContent_FixedPoint;
extern "C" {
    pub fn SUNNonlinSol_FixedPoint(y: N_Vector, m: ::std::os::raw::c_int) -> SUNNonlinearSolver;
}
extern "C" {
    pub fn SUNNonlinSol_FixedPointSens(
        count: ::std::os::raw::c_int,
        y: N_Vector,
        m: ::std::os::raw::c_int,
    ) -> SUNNonlinearSolver;
}
extern "C" {
    pub fn SUNNonlinSolGetType_FixedPoint(NLS: SUNNonlinearSolver) -> SUNNonlinearSolver_Type;
}
extern "C" {
    pub fn SUNNonlinSolInitialize_FixedPoint(NLS: SUNNonlinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSolve_FixedPoint(
        NLS: SUNNonlinearSolver,
        y0: N_Vector,
        y: N_Vector,
        w: N_Vector,
        tol: realtype,
        callSetup: ::std::os::raw::c_int,
        mem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolFree_FixedPoint(NLS: SUNNonlinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetSysFn_FixedPoint(
        NLS: SUNNonlinearSolver,
        SysFn: SUNNonlinSolSysFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetConvTestFn_FixedPoint(
        NLS: SUNNonlinearSolver,
        CTestFn: SUNNonlinSolConvTestFn,
        ctest_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetMaxIters_FixedPoint(
        NLS: SUNNonlinearSolver,
        maxiters: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetDamping_FixedPoint(
        NLS: SUNNonlinearSolver,
        beta: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolGetNumIters_FixedPoint(
        NLS: SUNNonlinearSolver,
        niters: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolGetCurIter_FixedPoint(
        NLS: SUNNonlinearSolver,
        iter: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolGetNumConvFails_FixedPoint(
        NLS: SUNNonlinearSolver,
        nconvfails: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolGetSysFn_FixedPoint(
        NLS: SUNNonlinearSolver,
        SysFn: *mut SUNNonlinSolSysFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetInfoFile_FixedPoint(
        NLS: SUNNonlinearSolver,
        info_file: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetPrintLevel_FixedPoint(
        NLS: SUNNonlinearSolver,
        print_level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUNNonlinearSolverContent_Newton {
    pub Sys: SUNNonlinSolSysFn,
    pub LSetup: SUNNonlinSolLSetupFn,
    pub LSolve: SUNNonlinSolLSolveFn,
    pub CTest: SUNNonlinSolConvTestFn,
    pub delta: N_Vector,
    pub jcur: ::std::os::raw::c_int,
    pub curiter: ::std::os::raw::c_int,
    pub maxiters: ::std::os::raw::c_int,
    pub niters: ::std::os::raw::c_long,
    pub nconvfails: ::std::os::raw::c_long,
    pub ctest_data: *mut ::std::os::raw::c_void,
    pub print_level: ::std::os::raw::c_int,
    pub info_file: *mut FILE,
}
#[test]
fn bindgen_test_layout__SUNNonlinearSolverContent_Newton() {
    assert_eq!(
        ::std::mem::size_of::<_SUNNonlinearSolverContent_Newton>(),
        88usize,
        concat!("Size of: ", stringify!(_SUNNonlinearSolverContent_Newton))
    );
    assert_eq!(
        ::std::mem::align_of::<_SUNNonlinearSolverContent_Newton>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_SUNNonlinearSolverContent_Newton)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).Sys as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(Sys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).LSetup as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(LSetup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).LSolve as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(LSolve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).CTest as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(CTest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).delta as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).jcur as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(jcur)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).curiter as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(curiter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).maxiters as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(maxiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).niters as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(niters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).nconvfails as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(nconvfails)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).ctest_data as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(ctest_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).print_level as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(print_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SUNNonlinearSolverContent_Newton>())).info_file as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_SUNNonlinearSolverContent_Newton),
            "::",
            stringify!(info_file)
        )
    );
}
pub type SUNNonlinearSolverContent_Newton = *mut _SUNNonlinearSolverContent_Newton;
extern "C" {
    pub fn SUNNonlinSol_Newton(y: N_Vector) -> SUNNonlinearSolver;
}
extern "C" {
    pub fn SUNNonlinSol_NewtonSens(count: ::std::os::raw::c_int, y: N_Vector)
        -> SUNNonlinearSolver;
}
extern "C" {
    pub fn SUNNonlinSolGetType_Newton(NLS: SUNNonlinearSolver) -> SUNNonlinearSolver_Type;
}
extern "C" {
    pub fn SUNNonlinSolInitialize_Newton(NLS: SUNNonlinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSolve_Newton(
        NLS: SUNNonlinearSolver,
        y0: N_Vector,
        y: N_Vector,
        w: N_Vector,
        tol: realtype,
        callLSetup: ::std::os::raw::c_int,
        mem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolFree_Newton(NLS: SUNNonlinearSolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetSysFn_Newton(
        NLS: SUNNonlinearSolver,
        SysFn: SUNNonlinSolSysFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetLSetupFn_Newton(
        NLS: SUNNonlinearSolver,
        LSetupFn: SUNNonlinSolLSetupFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetLSolveFn_Newton(
        NLS: SUNNonlinearSolver,
        LSolveFn: SUNNonlinSolLSolveFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetConvTestFn_Newton(
        NLS: SUNNonlinearSolver,
        CTestFn: SUNNonlinSolConvTestFn,
        ctest_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetMaxIters_Newton(
        NLS: SUNNonlinearSolver,
        maxiters: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolGetNumIters_Newton(
        NLS: SUNNonlinearSolver,
        niters: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolGetCurIter_Newton(
        NLS: SUNNonlinearSolver,
        iter: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolGetNumConvFails_Newton(
        NLS: SUNNonlinearSolver,
        nconvfails: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolGetSysFn_Newton(
        NLS: SUNNonlinearSolver,
        SysFn: *mut SUNNonlinSolSysFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetInfoFile_Newton(
        NLS: SUNNonlinearSolver,
        info_file: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SUNNonlinSolSetPrintLevel_Newton(
        NLS: SUNNonlinearSolver,
        print_level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type CVLsJacFn = ::std::option::Option<
    unsafe extern "C" fn(
        t: realtype,
        y: N_Vector,
        fy: N_Vector,
        Jac: SUNMatrix,
        user_data: *mut ::std::os::raw::c_void,
        tmp1: N_Vector,
        tmp2: N_Vector,
        tmp3: N_Vector,
    ) -> ::std::os::raw::c_int,
>;
pub type CVLsPrecSetupFn = ::std::option::Option<
    unsafe extern "C" fn(
        t: realtype,
        y: N_Vector,
        fy: N_Vector,
        jok: ::std::os::raw::c_int,
        jcurPtr: *mut ::std::os::raw::c_int,
        gamma: realtype,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type CVLsPrecSolveFn = ::std::option::Option<
    unsafe extern "C" fn(
        t: realtype,
        y: N_Vector,
        fy: N_Vector,
        r: N_Vector,
        z: N_Vector,
        gamma: realtype,
        delta: realtype,
        lr: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type CVLsJacTimesSetupFn = ::std::option::Option<
    unsafe extern "C" fn(
        t: realtype,
        y: N_Vector,
        fy: N_Vector,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type CVLsJacTimesVecFn = ::std::option::Option<
    unsafe extern "C" fn(
        v: N_Vector,
        Jv: N_Vector,
        t: realtype,
        y: N_Vector,
        fy: N_Vector,
        user_data: *mut ::std::os::raw::c_void,
        tmp: N_Vector,
    ) -> ::std::os::raw::c_int,
>;
pub type CVLsLinSysFn = ::std::option::Option<
    unsafe extern "C" fn(
        t: realtype,
        y: N_Vector,
        fy: N_Vector,
        A: SUNMatrix,
        jok: ::std::os::raw::c_int,
        jcur: *mut ::std::os::raw::c_int,
        gamma: realtype,
        user_data: *mut ::std::os::raw::c_void,
        tmp1: N_Vector,
        tmp2: N_Vector,
        tmp3: N_Vector,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn CVodeSetLinearSolver(
        cvode_mem: *mut ::std::os::raw::c_void,
        LS: SUNLinearSolver,
        A: SUNMatrix,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetJacFn(
        cvode_mem: *mut ::std::os::raw::c_void,
        jac: CVLsJacFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMaxStepsBetweenJac(
        cvode_mem: *mut ::std::os::raw::c_void,
        msbj: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetLinearSolutionScaling(
        cvode_mem: *mut ::std::os::raw::c_void,
        onoff: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetEpsLin(
        cvode_mem: *mut ::std::os::raw::c_void,
        eplifac: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetPreconditioner(
        cvode_mem: *mut ::std::os::raw::c_void,
        pset: CVLsPrecSetupFn,
        psolve: CVLsPrecSolveFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetJacTimes(
        cvode_mem: *mut ::std::os::raw::c_void,
        jtsetup: CVLsJacTimesSetupFn,
        jtimes: CVLsJacTimesVecFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetLinSysFn(
        cvode_mem: *mut ::std::os::raw::c_void,
        linsys: CVLsLinSysFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetLinWorkSpace(
        cvode_mem: *mut ::std::os::raw::c_void,
        lenrwLS: *mut ::std::os::raw::c_long,
        leniwLS: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumJacEvals(
        cvode_mem: *mut ::std::os::raw::c_void,
        njevals: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumPrecEvals(
        cvode_mem: *mut ::std::os::raw::c_void,
        npevals: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumPrecSolves(
        cvode_mem: *mut ::std::os::raw::c_void,
        npsolves: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumLinIters(
        cvode_mem: *mut ::std::os::raw::c_void,
        nliters: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumLinConvFails(
        cvode_mem: *mut ::std::os::raw::c_void,
        nlcfails: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumJTSetupEvals(
        cvode_mem: *mut ::std::os::raw::c_void,
        njtsetups: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumJtimesEvals(
        cvode_mem: *mut ::std::os::raw::c_void,
        njvevals: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumLinRhsEvals(
        cvode_mem: *mut ::std::os::raw::c_void,
        nfevalsLS: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetLinSolveStats(
        cvode_mem: *mut ::std::os::raw::c_void,
        njevals: *mut ::std::os::raw::c_long,
        nfevalsLS: *mut ::std::os::raw::c_long,
        nliters: *mut ::std::os::raw::c_long,
        nlcfails: *mut ::std::os::raw::c_long,
        npevals: *mut ::std::os::raw::c_long,
        npsolves: *mut ::std::os::raw::c_long,
        njtsetups: *mut ::std::os::raw::c_long,
        njtimes: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetLastLinFlag(
        cvode_mem: *mut ::std::os::raw::c_void,
        flag: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetLinReturnFlagName(flag: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
pub type CVProjFn = ::std::option::Option<
    unsafe extern "C" fn(
        t: realtype,
        ycur: N_Vector,
        corr: N_Vector,
        epsProj: realtype,
        err: N_Vector,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn CVodeSetProjFn(
        cvode_mem: *mut ::std::os::raw::c_void,
        pfun: CVProjFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetProjErrEst(
        cvode_mem: *mut ::std::os::raw::c_void,
        onoff: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetProjFrequency(
        cvode_mem: *mut ::std::os::raw::c_void,
        proj_freq: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMaxNumProjFails(
        cvode_mem: *mut ::std::os::raw::c_void,
        max_fails: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetEpsProj(
        cvode_mem: *mut ::std::os::raw::c_void,
        eps: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetProjFailEta(
        cvode_mem: *mut ::std::os::raw::c_void,
        eta: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumProjEvals(
        cvode_mem: *mut ::std::os::raw::c_void,
        nproj: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumProjFails(
        cvode_mem: *mut ::std::os::raw::c_void,
        nprf: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
pub type CVRhsFn = ::std::option::Option<
    unsafe extern "C" fn(
        t: realtype,
        y: N_Vector,
        ydot: N_Vector,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type CVRootFn = ::std::option::Option<
    unsafe extern "C" fn(
        t: realtype,
        y: N_Vector,
        gout: *mut realtype,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type CVEwtFn = ::std::option::Option<
    unsafe extern "C" fn(
        y: N_Vector,
        ewt: N_Vector,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type CVErrHandlerFn = ::std::option::Option<
    unsafe extern "C" fn(
        error_code: ::std::os::raw::c_int,
        module: *const ::std::os::raw::c_char,
        function: *const ::std::os::raw::c_char,
        msg: *mut ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type CVMonitorFn = ::std::option::Option<
    unsafe extern "C" fn(
        cvode_mem: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn CVodeCreate(lmm: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CVodeInit(
        cvode_mem: *mut ::std::os::raw::c_void,
        f: CVRhsFn,
        t0: realtype,
        y0: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeReInit(
        cvode_mem: *mut ::std::os::raw::c_void,
        t0: realtype,
        y0: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSStolerances(
        cvode_mem: *mut ::std::os::raw::c_void,
        reltol: realtype,
        abstol: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSVtolerances(
        cvode_mem: *mut ::std::os::raw::c_void,
        reltol: realtype,
        abstol: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeWFtolerances(
        cvode_mem: *mut ::std::os::raw::c_void,
        efun: CVEwtFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetErrHandlerFn(
        cvode_mem: *mut ::std::os::raw::c_void,
        ehfun: CVErrHandlerFn,
        eh_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetErrFile(
        cvode_mem: *mut ::std::os::raw::c_void,
        errfp: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetUserData(
        cvode_mem: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMonitorFn(
        cvode_mem: *mut ::std::os::raw::c_void,
        fn_: CVMonitorFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMonitorFrequency(
        cvode_mem: *mut ::std::os::raw::c_void,
        nst: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMaxOrd(
        cvode_mem: *mut ::std::os::raw::c_void,
        maxord: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMaxNumSteps(
        cvode_mem: *mut ::std::os::raw::c_void,
        mxsteps: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMaxHnilWarns(
        cvode_mem: *mut ::std::os::raw::c_void,
        mxhnil: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetStabLimDet(
        cvode_mem: *mut ::std::os::raw::c_void,
        stldet: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetInitStep(
        cvode_mem: *mut ::std::os::raw::c_void,
        hin: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMinStep(
        cvode_mem: *mut ::std::os::raw::c_void,
        hmin: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMaxStep(
        cvode_mem: *mut ::std::os::raw::c_void,
        hmax: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetStopTime(
        cvode_mem: *mut ::std::os::raw::c_void,
        tstop: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMaxErrTestFails(
        cvode_mem: *mut ::std::os::raw::c_void,
        maxnef: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMaxNonlinIters(
        cvode_mem: *mut ::std::os::raw::c_void,
        maxcor: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetMaxConvFails(
        cvode_mem: *mut ::std::os::raw::c_void,
        maxncf: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetNonlinConvCoef(
        cvode_mem: *mut ::std::os::raw::c_void,
        nlscoef: realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetConstraints(
        cvode_mem: *mut ::std::os::raw::c_void,
        constraints: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetNonlinearSolver(
        cvode_mem: *mut ::std::os::raw::c_void,
        NLS: SUNNonlinearSolver,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetUseIntegratorFusedKernels(
        cvode_mem: *mut ::std::os::raw::c_void,
        onoff: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeRootInit(
        cvode_mem: *mut ::std::os::raw::c_void,
        nrtfn: ::std::os::raw::c_int,
        g: CVRootFn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetRootDirection(
        cvode_mem: *mut ::std::os::raw::c_void,
        rootdir: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeSetNoInactiveRootWarn(
        cvode_mem: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVode(
        cvode_mem: *mut ::std::os::raw::c_void,
        tout: realtype,
        yout: N_Vector,
        tret: *mut realtype,
        itask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetDky(
        cvode_mem: *mut ::std::os::raw::c_void,
        t: realtype,
        k: ::std::os::raw::c_int,
        dky: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetWorkSpace(
        cvode_mem: *mut ::std::os::raw::c_void,
        lenrw: *mut ::std::os::raw::c_long,
        leniw: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumSteps(
        cvode_mem: *mut ::std::os::raw::c_void,
        nsteps: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumRhsEvals(
        cvode_mem: *mut ::std::os::raw::c_void,
        nfevals: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumLinSolvSetups(
        cvode_mem: *mut ::std::os::raw::c_void,
        nlinsetups: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumErrTestFails(
        cvode_mem: *mut ::std::os::raw::c_void,
        netfails: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetLastOrder(
        cvode_mem: *mut ::std::os::raw::c_void,
        qlast: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetCurrentOrder(
        cvode_mem: *mut ::std::os::raw::c_void,
        qcur: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetCurrentGamma(
        cvode_mem: *mut ::std::os::raw::c_void,
        gamma: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumStabLimOrderReds(
        cvode_mem: *mut ::std::os::raw::c_void,
        nslred: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetActualInitStep(
        cvode_mem: *mut ::std::os::raw::c_void,
        hinused: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetLastStep(
        cvode_mem: *mut ::std::os::raw::c_void,
        hlast: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetCurrentStep(
        cvode_mem: *mut ::std::os::raw::c_void,
        hcur: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetCurrentState(
        cvode_mem: *mut ::std::os::raw::c_void,
        y: *mut N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetCurrentTime(
        cvode_mem: *mut ::std::os::raw::c_void,
        tcur: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetTolScaleFactor(
        cvode_mem: *mut ::std::os::raw::c_void,
        tolsfac: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetErrWeights(
        cvode_mem: *mut ::std::os::raw::c_void,
        eweight: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetEstLocalErrors(
        cvode_mem: *mut ::std::os::raw::c_void,
        ele: N_Vector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumGEvals(
        cvode_mem: *mut ::std::os::raw::c_void,
        ngevals: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetRootInfo(
        cvode_mem: *mut ::std::os::raw::c_void,
        rootsfound: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetIntegratorStats(
        cvode_mem: *mut ::std::os::raw::c_void,
        nsteps: *mut ::std::os::raw::c_long,
        nfevals: *mut ::std::os::raw::c_long,
        nlinsetups: *mut ::std::os::raw::c_long,
        netfails: *mut ::std::os::raw::c_long,
        qlast: *mut ::std::os::raw::c_int,
        qcur: *mut ::std::os::raw::c_int,
        hinused: *mut realtype,
        hlast: *mut realtype,
        hcur: *mut realtype,
        tcur: *mut realtype,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumNonlinSolvIters(
        cvode_mem: *mut ::std::os::raw::c_void,
        nniters: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNumNonlinSolvConvFails(
        cvode_mem: *mut ::std::os::raw::c_void,
        nncfails: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetNonlinSolvStats(
        cvode_mem: *mut ::std::os::raw::c_void,
        nniters: *mut ::std::os::raw::c_long,
        nncfails: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CVodeGetReturnFlagName(flag: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn CVodeFree(cvode_mem: *mut *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CVodeSetJacTimesRhsFn(
        cvode_mem: *mut ::std::os::raw::c_void,
        jtimesRhsFn: CVRhsFn,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
